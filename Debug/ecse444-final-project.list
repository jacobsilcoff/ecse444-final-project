
ecse444-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007220  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c04  08007c04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c0c  08007c0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000164a4  20000070  08007c84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016514  08007c84  00026514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9ae  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003315  00000000  00000000  0003da4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00040d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a8  00000000  00000000  000425b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028a4a  00000000  00000000  00043c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012dc3  00000000  00000000  0006c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbe91  00000000  00000000  0007f465  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0017b2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e0  00000000  00000000  0017b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00181dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007390 	.word	0x08007390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007390 	.word	0x08007390

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b972 	b.w	8000cf0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	4688      	mov	r8, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d14b      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a32:	428a      	cmp	r2, r1
 8000a34:	4615      	mov	r5, r2
 8000a36:	d967      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0720 	rsb	r7, r2, #32
 8000a42:	fa01 f302 	lsl.w	r3, r1, r2
 8000a46:	fa20 f707 	lsr.w	r7, r0, r7
 8000a4a:	4095      	lsls	r5, r2
 8000a4c:	ea47 0803 	orr.w	r8, r7, r3
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a5c:	fa1f fc85 	uxth.w	ip, r5
 8000a60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a68:	fb07 f10c 	mul.w	r1, r7, ip
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18eb      	adds	r3, r5, r3
 8000a72:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a76:	f080 811b 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8118 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000a80:	3f02      	subs	r7, #2
 8000a82:	442b      	add	r3, r5
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a98:	45a4      	cmp	ip, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	192c      	adds	r4, r5, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8107 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	f240 8104 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000aac:	3802      	subs	r0, #2
 8000aae:	442c      	add	r4, r5
 8000ab0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ab4:	eba4 040c 	sub.w	r4, r4, ip
 8000ab8:	2700      	movs	r7, #0
 8000aba:	b11e      	cbz	r6, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xbe>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80eb 	beq.w	8000caa <__udivmoddi4+0x286>
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e9c6 0100 	strd	r0, r1, [r6]
 8000ada:	4638      	mov	r0, r7
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f783 	clz	r7, r3
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d147      	bne.n	8000b7a <__udivmoddi4+0x156>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd0>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80fa 	bhi.w	8000ce8 <__udivmoddi4+0x2c4>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4698      	mov	r8, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b02:	e9c6 4800 	strd	r4, r8, [r6]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xe8>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 808f 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b16:	1b49      	subs	r1, r1, r5
 8000b18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1c:	fa1f f885 	uxth.w	r8, r5
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb08 f10c 	mul.w	r1, r8, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	f200 80cd 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b46:	4684      	mov	ip, r0
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	b2a3      	uxth	r3, r4
 8000b4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b58:	fb08 f800 	mul.w	r8, r8, r0
 8000b5c:	45a0      	cmp	r8, r4
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x14c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x14a>
 8000b68:	45a0      	cmp	r8, r4
 8000b6a:	f200 80b6 	bhi.w	8000cda <__udivmoddi4+0x2b6>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	eba4 0408 	sub.w	r4, r4, r8
 8000b74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b78:	e79f      	b.n	8000aba <__udivmoddi4+0x96>
 8000b7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b7e:	40bb      	lsls	r3, r7
 8000b80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b88:	fa01 f407 	lsl.w	r4, r1, r7
 8000b8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b98:	4325      	orrs	r5, r4
 8000b9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b9e:	0c2c      	lsrs	r4, r5, #16
 8000ba0:	fb08 3319 	mls	r3, r8, r9, r3
 8000ba4:	fa1f fa8e 	uxth.w	sl, lr
 8000ba8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bac:	fb09 f40a 	mul.w	r4, r9, sl
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bb6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bc0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bc4:	f080 8087 	bcs.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f240 8084 	bls.w	8000cd6 <__udivmoddi4+0x2b2>
 8000bce:	f1a9 0902 	sub.w	r9, r9, #2
 8000bd2:	4473      	add	r3, lr
 8000bd4:	1b1b      	subs	r3, r3, r4
 8000bd6:	b2ad      	uxth	r5, r5
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000be4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000be8:	45a2      	cmp	sl, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1e 0404 	adds.w	r4, lr, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf4:	d26b      	bcs.n	8000cce <__udivmoddi4+0x2aa>
 8000bf6:	45a2      	cmp	sl, r4
 8000bf8:	d969      	bls.n	8000cce <__udivmoddi4+0x2aa>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4474      	add	r4, lr
 8000bfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c02:	fba0 8902 	umull	r8, r9, r0, r2
 8000c06:	eba4 040a 	sub.w	r4, r4, sl
 8000c0a:	454c      	cmp	r4, r9
 8000c0c:	46c2      	mov	sl, r8
 8000c0e:	464b      	mov	r3, r9
 8000c10:	d354      	bcc.n	8000cbc <__udivmoddi4+0x298>
 8000c12:	d051      	beq.n	8000cb8 <__udivmoddi4+0x294>
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d069      	beq.n	8000cec <__udivmoddi4+0x2c8>
 8000c18:	ebb1 050a 	subs.w	r5, r1, sl
 8000c1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	40fc      	lsrs	r4, r7
 8000c28:	ea4c 0505 	orr.w	r5, ip, r5
 8000c2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c30:	2700      	movs	r7, #0
 8000c32:	e747      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f703 	lsr.w	r7, r0, r3
 8000c3c:	4095      	lsls	r5, r2
 8000c3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c42:	fa21 f303 	lsr.w	r3, r1, r3
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	0c01      	lsrs	r1, r0, #16
 8000c4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c52:	fa1f f885 	uxth.w	r8, r5
 8000c56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5e:	fb07 f308 	mul.w	r3, r7, r8
 8000c62:	428b      	cmp	r3, r1
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x256>
 8000c6a:	1869      	adds	r1, r5, r1
 8000c6c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c70:	d22f      	bcs.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d92d      	bls.n	8000cd2 <__udivmoddi4+0x2ae>
 8000c76:	3f02      	subs	r7, #2
 8000c78:	4429      	add	r1, r5
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	b281      	uxth	r1, r0
 8000c7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8a:	fb00 f308 	mul.w	r3, r0, r8
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x27e>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c98:	d217      	bcs.n	8000cca <__udivmoddi4+0x2a6>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d915      	bls.n	8000cca <__udivmoddi4+0x2a6>
 8000c9e:	3802      	subs	r0, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1ac9      	subs	r1, r1, r3
 8000ca4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ca8:	e73b      	b.n	8000b22 <__udivmoddi4+0xfe>
 8000caa:	4637      	mov	r7, r6
 8000cac:	4630      	mov	r0, r6
 8000cae:	e709      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	e6e7      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	e6fb      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb8:	4541      	cmp	r1, r8
 8000cba:	d2ab      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	e7a4      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000cca:	4660      	mov	r0, ip
 8000ccc:	e7e9      	b.n	8000ca2 <__udivmoddi4+0x27e>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e795      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd2:	4667      	mov	r7, ip
 8000cd4:	e7d1      	b.n	8000c7a <__udivmoddi4+0x256>
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	e77c      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	442c      	add	r4, r5
 8000cde:	e747      	b.n	8000b70 <__udivmoddi4+0x14c>
 8000ce0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce4:	442b      	add	r3, r5
 8000ce6:	e72f      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce8:	4638      	mov	r0, r7
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xda>
 8000cec:	4637      	mov	r7, r6
 8000cee:	e6e9      	b.n	8000ac4 <__udivmoddi4+0xa0>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cfe:	f001 fbf6 	bl	80024ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d02:	f000 f8cd 	bl	8000ea0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d06:	f000 faeb 	bl	80012e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d0a:	f000 fac3 	bl	8001294 <MX_DMA_Init>
	MX_TIM2_Init();
 8000d0e:	f000 fa43 	bl	8001198 <MX_TIM2_Init>
	MX_I2C2_Init();
 8000d12:	f000 f9db 	bl	80010cc <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000d16:	f000 fa8d 	bl	8001234 <MX_USART1_UART_Init>
	MX_DAC1_Init();
 8000d1a:	f000 f93f 	bl	8000f9c <MX_DAC1_Init>
	MX_QUADSPI_Init();
 8000d1e:	f000 fa15 	bl	800114c <MX_QUADSPI_Init>
	MX_DFSDM1_Init();
 8000d22:	f000 f96d 	bl	8001000 <MX_DFSDM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000d26:	4856      	ldr	r0, [pc, #344]	; (8000e80 <main+0x188>)
 8000d28:	f005 f926 	bl	8005f78 <HAL_TIM_Base_Start>
	BSP_QSPI_Init();
 8000d2c:	f000 fc22 	bl	8001574 <BSP_QSPI_Init>
	//erase flash:
	int numBlocks = (int)(NUM_TONES*sizeof(currentTone)/64000.0 + 1);
 8000d30:	2304      	movs	r3, #4
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <main+0x18c>)
 8000d36:	fb03 f302 	mul.w	r3, r3, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb86 	bl	800044c <__aeabi_ui2d>
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <main+0x190>)
 8000d46:	f7ff fd25 	bl	8000794 <__aeabi_ddiv>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	4621      	mov	r1, r4
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	4b4d      	ldr	r3, [pc, #308]	; (8000e8c <main+0x194>)
 8000d58:	f7ff fa3c 	bl	80001d4 <__adddf3>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	460c      	mov	r4, r1
 8000d60:	4618      	mov	r0, r3
 8000d62:	4621      	mov	r1, r4
 8000d64:	f7ff fdfe 	bl	8000964 <__aeabi_d2iz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < numBlocks; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	e00c      	b.n	8000d8c <main+0x94>
		if (BSP_QSPI_Erase_Block(65536*i) != QSPI_OK) {
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd2c 	bl	80017d4 <BSP_QSPI_Erase_Block>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <main+0x8e>
			Error_Handler();
 8000d82:	f000 fbef 	bl	8001564 <Error_Handler>
	for (int i = 0; i < numBlocks; i++) {
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbee      	blt.n	8000d72 <main+0x7a>
		}
	}

	//program flash:
	for (int i = NUM_TONES-1; i >= 0; i--) {
 8000d94:	2304      	movs	r3, #4
 8000d96:	3b01      	subs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e069      	b.n	8000e70 <main+0x178>
		//calculate a single tone
		float w = TAU * TONE_FREQUENCIES[i];
 8000d9c:	4a3c      	ldr	r2, [pc, #240]	; (8000e90 <main+0x198>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000e94 <main+0x19c>
 8000db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db4:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int j = 0; j < TONE_LEN; j++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e042      	b.n	8000e44 <main+0x14c>
			float theta = w * j/OUTPUT_SAMPLE_RATE;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dd0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000e98 <main+0x1a0>
 8000dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd8:	edc7 7a02 	vstr	s15, [r7, #8]
			float s = (1 + arm_sin_f32(theta)) / 2.0;
 8000ddc:	ed97 0a02 	vldr	s0, [r7, #8]
 8000de0:	f006 f9b6 	bl	8007150 <arm_sin_f32>
 8000de4:	eeb0 7a40 	vmov.f32	s14, s0
 8000de8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000df0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df8:	edc7 7a01 	vstr	s15, [r7, #4]
			currentTone[j] = (uint32_t) (2/3.0 * MAX_TONE_AMPLITUDE * s);
 8000dfc:	23ff      	movs	r3, #255	; 0xff
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb34 	bl	800046c <__aeabi_i2d>
 8000e04:	a31c      	add	r3, pc, #112	; (adr r3, 8000e78 <main+0x180>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fb99 	bl	8000540 <__aeabi_dmul>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460c      	mov	r4, r1
 8000e12:	4625      	mov	r5, r4
 8000e14:	461c      	mov	r4, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fb3a 	bl	8000490 <__aeabi_f2d>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4620      	mov	r0, r4
 8000e22:	4629      	mov	r1, r5
 8000e24:	f7ff fb8c 	bl	8000540 <__aeabi_dmul>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	4621      	mov	r1, r4
 8000e30:	f7ff fdc0 	bl	80009b4 <__aeabi_d2uiz>
 8000e34:	4601      	mov	r1, r0
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <main+0x1a4>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int j = 0; j < TONE_LEN; j++) {
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	dbb7      	blt.n	8000dbe <main+0xc6>
		}
		//write tone to flash
		if (BSP_QSPI_Write(currentTone, i * sizeof(currentTone), sizeof(currentTone)) != QSPI_OK) {
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <main+0x18c>)
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <main+0x18c>)
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <main+0x1a4>)
 8000e5c:	f000 fc3c 	bl	80016d8 <BSP_QSPI_Write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <main+0x172>
			Error_Handler();
 8000e66:	f000 fb7d 	bl	8001564 <Error_Handler>
	for (int i = NUM_TONES-1; i >= 0; i--) {
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da92      	bge.n	8000d9c <main+0xa4>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000e76:	e7fe      	b.n	8000e76 <main+0x17e>
 8000e78:	55555555 	.word	0x55555555
 8000e7c:	3fe55555 	.word	0x3fe55555
 8000e80:	20000294 	.word	0x20000294
 8000e84:	00015f90 	.word	0x00015f90
 8000e88:	40ef4000 	.word	0x40ef4000
 8000e8c:	3ff00000 	.word	0x3ff00000
 8000e90:	080073a8 	.word	0x080073a8
 8000e94:	40c90fdb 	.word	0x40c90fdb
 8000e98:	4612e000 	.word	0x4612e000
 8000e9c:	200004a8 	.word	0x200004a8

08000ea0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b8      	sub	sp, #224	; 0xe0
 8000ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 f9be 	bl	8007230 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2288      	movs	r2, #136	; 0x88
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f006 f9b0 	bl	8007230 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ee2:	2360      	movs	r3, #96	; 0x60
 8000ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000efa:	2328      	movs	r3, #40	; 0x28
 8000efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fd0a 	bl	8004930 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x86>
	{
		Error_Handler();
 8000f22:	f000 fb1f 	bl	8001564 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 f8d6 	bl	80050fc <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xba>
	{
		Error_Handler();
 8000f56:	f000 fb05 	bl	8001564 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <SystemClock_Config+0xf8>)
 8000f5c:	603b      	str	r3, [r7, #0]
			|RCC_PERIPHCLK_DFSDM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 fafa 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xde>
	{
		Error_Handler();
 8000f7a:	f000 faf3 	bl	8001564 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f82:	f002 ff9f 	bl	8003ec4 <HAL_PWREx_ControlVoltageScaling>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xf0>
	{
		Error_Handler();
 8000f8c:	f000 faea 	bl	8001564 <Error_Handler>
	}
}
 8000f90:	bf00      	nop
 8000f92:	37e0      	adds	r7, #224	; 0xe0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	00010081 	.word	0x00010081

08000f9c <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2224      	movs	r2, #36	; 0x24
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 f941 	bl	8007230 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_DAC1_Init+0x5c>)
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_DAC1_Init+0x60>)
 8000fb2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <MX_DAC1_Init+0x5c>)
 8000fb6:	f001 fbd7 	bl	8002768 <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC1_Init+0x28>
	{
		Error_Handler();
 8000fc0:	f000 fad0 	bl	8001564 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fc8:	2324      	movs	r3, #36	; 0x24
 8000fca:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_DAC1_Init+0x5c>)
 8000fe0:	f001 fd5f 	bl	8002aa2 <HAL_DAC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_DAC1_Init+0x52>
	{
		Error_Handler();
 8000fea:	f000 fabb 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000d0 	.word	0x200000d0
 8000ffc:	40007400 	.word	0x40007400

08001000 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_DFSDM1_Init+0xbc>)
 8001008:	601a      	str	r2, [r3, #0]
	hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
	hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 8001012:	2201      	movs	r2, #1
 8001014:	721a      	strb	r2, [r3, #8]
	hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 8001018:	2201      	movs	r2, #1
 800101a:	725a      	strb	r2, [r3, #9]
	hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 800101e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001022:	61da      	str	r2, [r3, #28]
	hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 8001026:	22fa      	movs	r2, #250	; 0xfa
 8001028:	621a      	str	r2, [r3, #32]
	hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 800102c:	2201      	movs	r2, #1
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 8001032:	f001 ffa5 	bl	8002f80 <HAL_DFSDM_FilterInit>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_DFSDM1_Init+0x40>
	{
		Error_Handler();
 800103c:	f000 fa92 	bl	8001564 <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <MX_DFSDM1_Init+0xc4>)
 8001044:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001054:	2222      	movs	r2, #34	; 0x22
 8001056:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001072:	2204      	movs	r2, #4
 8001074:	621a      	str	r2, [r3, #32]
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 800107e:	2201      	movs	r2, #1
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 800108a:	2200      	movs	r2, #0
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_DFSDM1_Init+0xc0>)
 8001090:	f001 feb6 	bl	8002e00 <HAL_DFSDM_ChannelInit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_DFSDM1_Init+0x9e>
	{
		Error_Handler();
 800109a:	f000 fa63 	bl	8001564 <Error_Handler>
	}
	if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800109e:	2201      	movs	r2, #1
 80010a0:	4909      	ldr	r1, [pc, #36]	; (80010c8 <MX_DFSDM1_Init+0xc8>)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_DFSDM1_Init+0xb8>)
 80010a4:	f002 f846 	bl	8003134 <HAL_DFSDM_FilterConfigRegChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_DFSDM1_Init+0xb2>
	{
		Error_Handler();
 80010ae:	f000 fa59 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000130 	.word	0x20000130
 80010bc:	40016100 	.word	0x40016100
 80010c0:	200002e0 	.word	0x200002e0
 80010c4:	40016040 	.word	0x40016040
 80010c8:	00020004 	.word	0x00020004

080010cc <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C2_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C2_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10909CEC;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C2_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C2_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C2_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C2_Init+0x74>)
 8001108:	f002 fda8 	bl	8003c5c <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001112:	f000 fa27 	bl	8001564 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C2_Init+0x74>)
 800111a:	f002 fe2e 	bl	8003d7a <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001124:	f000 fa1e 	bl	8001564 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C2_Init+0x74>)
 800112c:	f002 fe70 	bl	8003e10 <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001136:	f000 fa15 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000e4 	.word	0x200000e4
 8001144:	40005800 	.word	0x40005800
 8001148:	10909cec 	.word	0x10909cec

0800114c <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_QUADSPI_Init+0x44>)
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <MX_QUADSPI_Init+0x48>)
 8001154:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_QUADSPI_Init+0x44>)
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_QUADSPI_Init+0x44>)
 800115e:	2201      	movs	r2, #1
 8001160:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_QUADSPI_Init+0x44>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_QUADSPI_Init+0x44>)
 800116a:	2201      	movs	r2, #1
 800116c:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_QUADSPI_Init+0x44>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_QUADSPI_Init+0x44>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_QUADSPI_Init+0x44>)
 800117c:	f002 fef8 	bl	8003f70 <HAL_QSPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_QUADSPI_Init+0x3e>
	{
		Error_Handler();
 8001186:	f000 f9ed 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20016438 	.word	0x20016438
 8001194:	a0001000 	.word	0xa0001000

08001198 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_TIM2_Init+0x98>)
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011bc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM2_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_TIM2_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8500;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM2_Init+0x98>)
 80011cc:	f242 1234 	movw	r2, #8500	; 0x2134
 80011d0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_TIM2_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_TIM2_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_TIM2_Init+0x98>)
 80011e0:	f004 fe72 	bl	8005ec8 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80011ea:	f000 f9bb 	bl	8001564 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_TIM2_Init+0x98>)
 80011fc:	f005 f8b3 	bl	8006366 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8001206:	f000 f9ad 	bl	8001564 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800120a:	2320      	movs	r3, #32
 800120c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_TIM2_Init+0x98>)
 8001218:	f005 faba 	bl	8006790 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001222:	f000 f99f 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000294 	.word	0x20000294

08001234 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART1_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART1_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001278:	f005 fb30 	bl	80068dc <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8001282:	f000 f96f 	bl	8001564 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001cc 	.word	0x200001cc
 8001290:	40013800 	.word	0x40013800

08001294 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x48>)
 800129c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x48>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6493      	str	r3, [r2, #72]	; 0x48
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x48>)
 80012a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	200d      	movs	r0, #13
 80012b8:	f001 fa2c 	bl	8002714 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012bc:	200d      	movs	r0, #13
 80012be:	f001 fa45 	bl	800274c <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	200e      	movs	r0, #14
 80012c8:	f001 fa24 	bl	8002714 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012cc:	200e      	movs	r0, #14
 80012ce:	f001 fa3d 	bl	800274c <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <MX_GPIO_Init+0xd4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <MX_GPIO_Init+0xd4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_GPIO_Init+0xd4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <MX_GPIO_Init+0xd4>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_GPIO_Init+0xd4>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_GPIO_Init+0xd4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <MX_GPIO_Init+0xd8>)
 800135e:	f002 fc4d 	bl	8003bfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BLUE_BUTTON_Pin */
	GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_GPIO_Init+0xdc>)
 800136a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4812      	ldr	r0, [pc, #72]	; (80013c0 <MX_GPIO_Init+0xe0>)
 8001378:	f002 f9a4 	bl	80036c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800137c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001380:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <MX_GPIO_Init+0xd8>)
 8001396:	f002 f995 	bl	80036c4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2028      	movs	r0, #40	; 0x28
 80013a0:	f001 f9b8 	bl	8002714 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013a4:	2028      	movs	r0, #40	; 0x28
 80013a6:	f001 f9d1 	bl	800274c <HAL_NVIC_EnableIRQ>

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48000400 	.word	0x48000400
 80013bc:	10110000 	.word	0x10110000
 80013c0:	48000800 	.word	0x48000800

080013c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BLUE_BUTTON_Pin) {
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d4:	d107      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0x22>
		if (!playingSequence) {
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <HAL_GPIO_EXTI_Callback+0x22>
			addToneToSequence();
 80013de:	f000 f809 	bl	80013f4 <addToneToSequence>
			playSequence();
 80013e2:	f000 f845 	bl	8001470 <playSequence>
		}
	}
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000094 	.word	0x20000094

080013f4 <addToneToSequence>:

void addToneToSequence(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	//If we exceed buffer size, pattern resets anew -- unlikely to matter
	if (toneSequenceSize == MAX_TONE_SEQUENCE_LENGTH) {
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <addToneToSequence+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2264      	movs	r2, #100	; 0x64
 80013fe:	4293      	cmp	r3, r2
 8001400:	d102      	bne.n	8001408 <addToneToSequence+0x14>
		toneSequenceSize = 0;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <addToneToSequence+0x40>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	}
	toneSequence[toneSequenceSize] = rand() % NUM_TONES;
 8001408:	f005 ff1a 	bl	8007240 <rand>
 800140c:	4602      	mov	r2, r0
 800140e:	2304      	movs	r3, #4
 8001410:	4908      	ldr	r1, [pc, #32]	; (8001434 <addToneToSequence+0x40>)
 8001412:	6809      	ldr	r1, [r1, #0]
 8001414:	fb92 f0f3 	sdiv	r0, r2, r3
 8001418:	fb03 f300 	mul.w	r3, r3, r0
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <addToneToSequence+0x44>)
 8001420:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	toneSequenceSize++;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <addToneToSequence+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a02      	ldr	r2, [pc, #8]	; (8001434 <addToneToSequence+0x40>)
 800142c:	6013      	str	r3, [r2, #0]
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000008c 	.word	0x2000008c
 8001438:	20000318 	.word	0x20000318

0800143c <loadToneFromFlash>:

void loadToneFromFlash(int frequency) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if (BSP_QSPI_Read(currentTone, sizeof(currentTone) * frequency, sizeof(currentTone)) != QSPI_OK) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <loadToneFromFlash+0x2c>)
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <loadToneFromFlash+0x2c>)
 800144e:	4619      	mov	r1, r3
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <loadToneFromFlash+0x30>)
 8001452:	f000 f8fb 	bl	800164c <BSP_QSPI_Read>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <loadToneFromFlash+0x24>
		Error_Handler();
 800145c:	f000 f882 	bl	8001564 <Error_Handler>
	}
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	00015f90 	.word	0x00015f90
 800146c:	200004a8 	.word	0x200004a8

08001470 <playSequence>:

/*
 * non-blocking function that plays the sequence to the user
 */
void playSequence() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8
	playingSequence = 1;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <playSequence+0x48>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
	toneIndex = 0;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <playSequence+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
	loadToneFromFlash(toneSequence[toneIndex]);
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <playSequence+0x4c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <playSequence+0x50>)
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffd5 	bl	800143c <loadToneFromFlash>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001492:	2100      	movs	r1, #0
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <playSequence+0x54>)
 8001496:	f001 fa47 	bl	8002928 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, currentTone, TONE_LEN, DAC_ALIGN_8B_R);
 800149a:	f245 73e4 	movw	r3, #22500	; 0x57e4
 800149e:	461a      	mov	r2, r3
 80014a0:	2308      	movs	r3, #8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <playSequence+0x58>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <playSequence+0x54>)
 80014ac:	f001 f97e 	bl	80027ac <HAL_DAC_Start_DMA>
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000094 	.word	0x20000094
 80014bc:	20000090 	.word	0x20000090
 80014c0:	20000318 	.word	0x20000318
 80014c4:	200000d0 	.word	0x200000d0
 80014c8:	200004a8 	.word	0x200004a8

080014cc <HAL_DAC_ConvCpltCallbackCh1>:
	while (playingSequence) {
		HAL_Delay(100);
	}
}

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	6078      	str	r0, [r7, #4]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 80014d8:	f001 fa26 	bl	8002928 <HAL_DAC_Stop_DMA>
	if (toneIndex >= toneSequenceSize) {
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_DAC_ConvCpltCallbackCh1+0x60>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_DAC_ConvCpltCallbackCh1+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	db03      	blt.n	80014f0 <HAL_DAC_ConvCpltCallbackCh1+0x24>
		playingSequence = 0;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		return;
 80014ee:	e017      	b.n	8001520 <HAL_DAC_ConvCpltCallbackCh1+0x54>
	}
	toneIndex++;
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_DAC_ConvCpltCallbackCh1+0x60>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_DAC_ConvCpltCallbackCh1+0x60>)
 80014f8:	6013      	str	r3, [r2, #0]
	loadToneFromFlash(toneSequence[toneIndex]);
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_DAC_ConvCpltCallbackCh1+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff99 	bl	800143c <loadToneFromFlash>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, currentTone, TONE_LEN, DAC_ALIGN_8B_R);
 800150a:	f245 73e4 	movw	r3, #22500	; 0x57e4
 800150e:	461a      	mov	r2, r3
 8001510:	2308      	movs	r3, #8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8001518:	2100      	movs	r1, #0
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 800151c:	f001 f946 	bl	80027ac <HAL_DAC_Start_DMA>
}
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000d0 	.word	0x200000d0
 800152c:	20000090 	.word	0x20000090
 8001530:	2000008c 	.word	0x2000008c
 8001534:	20000094 	.word	0x20000094
 8001538:	20000318 	.word	0x20000318
 800153c:	200004a8 	.word	0x200004a8

08001540 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001552:	f000 ffe5 	bl	8002520 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40001000 	.word	0x40001000

08001564 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <BSP_QSPI_Init+0xd0>)
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <BSP_QSPI_Init+0xd4>)
 800157e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001580:	4830      	ldr	r0, [pc, #192]	; (8001644 <BSP_QSPI_Init+0xd0>)
 8001582:	f002 fd6b 	bl	800405c <HAL_QSPI_DeInit>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e054      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8001590:	f000 f964 	bl	800185c <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <BSP_QSPI_Init+0xd0>)
 8001596:	2202      	movs	r2, #2
 8001598:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <BSP_QSPI_Init+0xd0>)
 800159c:	2204      	movs	r2, #4
 800159e:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015a2:	2210      	movs	r2, #16
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015aa:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80015be:	2320      	movs	r3, #32
 80015c0:	e003      	b.n	80015ca <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 80015ca:	3b01      	subs	r3, #1
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015d0:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80015de:	4819      	ldr	r0, [pc, #100]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015e0:	f002 fcc6 	bl	8003f70 <HAL_QSPI_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e025      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <BSP_QSPI_Init+0xd0>)
 80015f0:	f000 f974 	bl	80018dc <QSPI_ResetMemory>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80015fa:	2304      	movs	r3, #4
 80015fc:	e01d      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80015fe:	2101      	movs	r1, #1
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <BSP_QSPI_Init+0xd0>)
 8001602:	f000 fa35 	bl	8001a70 <QSPI_QuadMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e014      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8001610:	2101      	movs	r1, #1
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <BSP_QSPI_Init+0xd0>)
 8001614:	f000 fad4 	bl	8001bc0 <QSPI_HighPerfMode>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00b      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <BSP_QSPI_Init+0xd0>)
 8001624:	2201      	movs	r2, #1
 8001626:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <BSP_QSPI_Init+0xd0>)
 800162a:	f002 fca1 	bl	8003f70 <HAL_QSPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2001647c 	.word	0x2001647c
 8001648:	a0001000 	.word	0xa0001000

0800164c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b092      	sub	sp, #72	; 0x48
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8001658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800165e:	23eb      	movs	r3, #235	; 0xeb
 8001660:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8001662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8001668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166c:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8001672:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800167c:	23aa      	movs	r3, #170	; 0xaa
 800167e:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8001680:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8001686:	2304      	movs	r3, #4
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001692:	2300      	movs	r3, #0
 8001694:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8001696:	2300      	movs	r3, #0
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4619      	mov	r1, r3
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <BSP_QSPI_Read+0x88>)
 80016a6:	f002 fcfd 	bl	80040a4 <HAL_QSPI_Command>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e00b      	b.n	80016cc <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <BSP_QSPI_Read+0x88>)
 80016bc:	f002 fde7 	bl	800428e <HAL_QSPI_Receive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3748      	adds	r7, #72	; 0x48
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2001647c 	.word	0x2001647c

080016d8 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b096      	sub	sp, #88	; 0x58
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80016ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d901      	bls.n	80016fa <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 800170c:	2338      	movs	r3, #56	; 0x38
 800170e:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001710:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171a:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8001720:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800172e:	2300      	movs	r3, #0
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001732:	2300      	movs	r3, #0
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8001736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001738:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800173e:	4824      	ldr	r0, [pc, #144]	; (80017d0 <BSP_QSPI_Write+0xf8>)
 8001740:	f000 f910 	bl	8001964 <QSPI_WriteEnable>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e03b      	b.n	80017c6 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4619      	mov	r1, r3
 8001758:	481d      	ldr	r0, [pc, #116]	; (80017d0 <BSP_QSPI_Write+0xf8>)
 800175a:	f002 fca3 	bl	80040a4 <HAL_QSPI_Command>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e02e      	b.n	80017c6 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <BSP_QSPI_Write+0xf8>)
 8001770:	f002 fcf6 	bl	8004160 <HAL_QSPI_Transmit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e023      	b.n	80017c6 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800177e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <BSP_QSPI_Write+0xf8>)
 8001784:	f000 f93a 	bl	80019fc <QSPI_AutoPollingMemReady>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e019      	b.n	80017c6 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8001792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	4413      	add	r3, r2
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80017a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d203      	bcs.n	80017b6 <BSP_QSPI_Write+0xde>
 80017ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	e001      	b.n	80017ba <BSP_QSPI_Write+0xe2>
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80017bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3b8      	bcc.n	8001736 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3758      	adds	r7, #88	; 0x58
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2001647c 	.word	0x2001647c

080017d4 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80017dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e0:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 80017e2:	23d8      	movs	r3, #216	; 0xd8
 80017e4:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80017e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80017ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f0:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <BSP_QSPI_Erase_Block+0x84>)
 8001810:	f000 f8a8 	bl	8001964 <QSPI_WriteEnable>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e017      	b.n	800184e <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <BSP_QSPI_Erase_Block+0x84>)
 800182a:	f002 fc3b 	bl	80040a4 <HAL_QSPI_Command>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e00a      	b.n	800184e <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8001838:	f640 51ac 	movw	r1, #3500	; 0xdac
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <BSP_QSPI_Erase_Block+0x84>)
 800183e:	f000 f8dd 	bl	80019fc <QSPI_AutoPollingMemReady>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3740      	adds	r7, #64	; 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2001647c 	.word	0x2001647c

0800185c <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6513      	str	r3, [r2, #80]	; 0x50
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 800188c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001890:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <BSP_QSPI_MspInit+0x78>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80018aa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80018ae:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018bc:	230a      	movs	r3, #10
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	4619      	mov	r1, r3
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <BSP_QSPI_MspInit+0x7c>)
 80018c8:	f001 fefc 	bl	80036c4 <HAL_GPIO_Init>
}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48001000 	.word	0x48001000

080018dc <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b090      	sub	sp, #64	; 0x40
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e8:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80018ea:	2366      	movs	r3, #102	; 0x66
 80018ec:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4619      	mov	r1, r3
 8001914:	4812      	ldr	r0, [pc, #72]	; (8001960 <QSPI_ResetMemory+0x84>)
 8001916:	f002 fbc5 	bl	80040a4 <HAL_QSPI_Command>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e019      	b.n	8001958 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8001924:	2399      	movs	r3, #153	; 0x99
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <QSPI_ResetMemory+0x84>)
 8001934:	f002 fbb6 	bl	80040a4 <HAL_QSPI_Command>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00a      	b.n	8001958 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001942:	f241 3188 	movw	r1, #5000	; 0x1388
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <QSPI_ResetMemory+0x84>)
 8001948:	f000 f858 	bl	80019fc <QSPI_AutoPollingMemReady>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3740      	adds	r7, #64	; 0x40
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2001647c 	.word	0x2001647c

08001964 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b096      	sub	sp, #88	; 0x58
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800196c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8001972:	2306      	movs	r3, #6
 8001974:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800198a:	2300      	movs	r3, #0
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800198e:	2300      	movs	r3, #0
 8001990:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4619      	mov	r1, r3
 800199c:	4816      	ldr	r0, [pc, #88]	; (80019f8 <QSPI_WriteEnable+0x94>)
 800199e:	f002 fb81 	bl	80040a4 <HAL_QSPI_Command>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e020      	b.n	80019ee <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 80019ac:	2302      	movs	r3, #2
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 80019b0:	2302      	movs	r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80019bc:	2310      	movs	r3, #16
 80019be:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80019c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c4:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80019c6:	2305      	movs	r3, #5
 80019c8:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80019ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019d0:	f107 0208 	add.w	r2, r7, #8
 80019d4:	f107 0120 	add.w	r1, r7, #32
 80019d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <QSPI_WriteEnable+0x94>)
 80019de:	f002 fcf8 	bl	80043d2 <HAL_QSPI_AutoPolling>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3758      	adds	r7, #88	; 0x58
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2001647c 	.word	0x2001647c

080019fc <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b096      	sub	sp, #88	; 0x58
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a26:	2300      	movs	r3, #0
 8001a28:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001a3e:	2310      	movs	r3, #16
 8001a40:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a46:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	f107 0120 	add.w	r1, r7, #32
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <QSPI_AutoPollingMemReady+0x70>)
 8001a54:	f002 fcbd 	bl	80043d2 <HAL_QSPI_AutoPolling>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3758      	adds	r7, #88	; 0x58
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2001647c 	.word	0x2001647c

08001a70 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b092      	sub	sp, #72	; 0x48
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001a82:	2305      	movs	r3, #5
 8001a84:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4842      	ldr	r0, [pc, #264]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001ab4:	f002 faf6 	bl	80040a4 <HAL_QSPI_Command>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e077      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ac2:	f107 030f 	add.w	r3, r7, #15
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4619      	mov	r1, r3
 8001acc:	483b      	ldr	r0, [pc, #236]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001ace:	f002 fbde 	bl	800428e <HAL_QSPI_Receive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e06a      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001adc:	4837      	ldr	r0, [pc, #220]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001ade:	f7ff ff41 	bl	8001964 <QSPI_WriteEnable>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e062      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e004      	b.n	8001b08 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4619      	mov	r1, r3
 8001b16:	4829      	ldr	r0, [pc, #164]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001b18:	f002 fac4 	bl	80040a4 <HAL_QSPI_Command>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e045      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b26:	f107 030f 	add.w	r3, r7, #15
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4822      	ldr	r0, [pc, #136]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001b32:	f002 fb15 	bl	8004160 <HAL_QSPI_Transmit>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e038      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001b40:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b44:	481d      	ldr	r0, [pc, #116]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001b46:	f7ff ff59 	bl	80019fc <QSPI_AutoPollingMemReady>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e02e      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8001b54:	2305      	movs	r3, #5
 8001b56:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4619      	mov	r1, r3
 8001b62:	4816      	ldr	r0, [pc, #88]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001b64:	f002 fa9e 	bl	80040a4 <HAL_QSPI_Command>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e01f      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001b72:	f107 030f 	add.w	r3, r7, #15
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480f      	ldr	r0, [pc, #60]	; (8001bbc <QSPI_QuadMode+0x14c>)
 8001b7e:	f002 fb86 	bl	800428e <HAL_QSPI_Receive>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e012      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <QSPI_QuadMode+0x12c>
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d007      	beq.n	8001bac <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3748      	adds	r7, #72	; 0x48
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2001647c 	.word	0x2001647c

08001bc0 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b092      	sub	sp, #72	; 0x48
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4619      	mov	r1, r3
 8001c02:	4853      	ldr	r0, [pc, #332]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001c04:	f002 fa4e 	bl	80040a4 <HAL_QSPI_Command>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	484c      	ldr	r0, [pc, #304]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001c1e:	f002 fb36 	bl	800428e <HAL_QSPI_Receive>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e08d      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001c2c:	2315      	movs	r3, #21
 8001c2e:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4844      	ldr	r0, [pc, #272]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001c40:	f002 fa30 	bl	80040a4 <HAL_QSPI_Command>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07c      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	3301      	adds	r3, #1
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4619      	mov	r1, r3
 8001c5a:	483d      	ldr	r0, [pc, #244]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001c5c:	f002 fb17 	bl	800428e <HAL_QSPI_Receive>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06e      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8001c6a:	4839      	ldr	r0, [pc, #228]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001c6c:	f7ff fe7a 	bl	8001964 <QSPI_WriteEnable>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e066      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	73bb      	strb	r3, [r7, #14]
 8001c8a:	e004      	b.n	8001c96 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	f023 0302 	bic.w	r3, r3, #2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001c96:	2301      	movs	r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4829      	ldr	r0, [pc, #164]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001caa:	f002 f9fb 	bl	80040a4 <HAL_QSPI_Command>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e047      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4823      	ldr	r0, [pc, #140]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001cc4:	f002 fa4c 	bl	8004160 <HAL_QSPI_Transmit>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e03a      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8001cd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001cd8:	f7ff fe90 	bl	80019fc <QSPI_AutoPollingMemReady>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e030      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8001ce6:	2315      	movs	r3, #21
 8001ce8:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001cfa:	f002 f9d3 	bl	80040a4 <HAL_QSPI_Command>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e01f      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4619      	mov	r1, r3
 8001d12:	480f      	ldr	r0, [pc, #60]	; (8001d50 <QSPI_HighPerfMode+0x190>)
 8001d14:	f002 fabb 	bl	800428e <HAL_QSPI_Receive>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e012      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001d22:	7b7b      	ldrb	r3, [r7, #13]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <QSPI_HighPerfMode+0x172>
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d007      	beq.n	8001d42 <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001d32:	7b7b      	ldrb	r3, [r7, #13]
 8001d34:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3748      	adds	r7, #72	; 0x48
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2001647c 	.word	0x2001647c

08001d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_MspInit+0x44>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_MspInit+0x44>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6613      	str	r3, [r2, #96]	; 0x60
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x44>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x44>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x44>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x44>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <HAL_DAC_MspInit+0xd8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d156      	bne.n	8001e6c <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001dc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_DAC_MspInit+0xdc>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dee:	2310      	movs	r3, #16
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e04:	f001 fc5e 	bl	80036c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_DAC_MspInit+0xe4>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e10:	2206      	movs	r2, #6
 8001e12:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e16:	2210      	movs	r2, #16
 8001e18:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e32:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e42:	f001 fa09 	bl	8003258 <HAL_DMA_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8001e4c:	f7ff fb8a 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_DAC_MspInit+0xe0>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2036      	movs	r0, #54	; 0x36
 8001e62:	f000 fc57 	bl	8002714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e66:	2036      	movs	r0, #54	; 0x36
 8001e68:	f000 fc70 	bl	800274c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40007400 	.word	0x40007400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	20000184 	.word	0x20000184
 8001e80:	40020030 	.word	0x40020030

08001e84 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001e9c:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_DFSDM_FilterMspInit+0xf8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d131      	bne.n	8001f08 <HAL_DFSDM_FilterMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a35      	ldr	r2, [pc, #212]	; (8001f80 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001eac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_DFSDM_FilterMspInit+0xfc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10b      	bne.n	8001ece <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_DFSDM_FilterMspInit+0x100>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001ee6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	4821      	ldr	r0, [pc, #132]	; (8001f88 <HAL_DFSDM_FilterMspInit+0x104>)
 8001f04:	f001 fbde 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE END DFSDM1_MspInit 1 */
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_DFSDM_FilterMspInit+0x108>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d130      	bne.n	8001f74 <HAL_DFSDM_FilterMspInit+0xf0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_DFSDM_FilterMspInit+0x110>)
 8001f16:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001f4c:	4810      	ldr	r0, [pc, #64]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f4e:	f001 f983 	bl	8003258 <HAL_DMA_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_DFSDM_FilterMspInit+0xd8>
    {
      Error_Handler();
 8001f58:	f7ff fb04 	bl	8001564 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <HAL_DFSDM_FilterMspInit+0x10c>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000009c 	.word	0x2000009c
 8001f80:	20000098 	.word	0x20000098
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48001000 	.word	0x48001000
 8001f8c:	40016100 	.word	0x40016100
 8001f90:	2000024c 	.word	0x2000024c
 8001f94:	40020044 	.word	0x40020044

08001f98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d131      	bne.n	800201c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_DFSDM_ChannelMspInit+0x90>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <HAL_DFSDM_ChannelMspInit+0x90>)
 8001fc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_DFSDM_ChannelMspInit+0x90>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fce:	4a17      	ldr	r2, [pc, #92]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_DFSDM_ChannelMspInit+0x94>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001ffa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800200c:	2306      	movs	r3, #6
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_DFSDM_ChannelMspInit+0x98>)
 8002018:	f001 fb54 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000009c 	.word	0x2000009c
 8002028:	20000098 	.word	0x20000098
 800202c:	40021000 	.word	0x40021000
 8002030:	48001000 	.word	0x48001000

08002034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_I2C_MspInit+0x7c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d128      	bne.n	80020a8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800206e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002074:	2312      	movs	r3, #18
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002078:	2301      	movs	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002080:	2304      	movs	r3, #4
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	480b      	ldr	r0, [pc, #44]	; (80020b8 <HAL_I2C_MspInit+0x84>)
 800208c:	f001 fb1a 	bl	80036c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 8002096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800209a:	6593      	str	r3, [r2, #88]	; 0x58
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_I2C_MspInit+0x80>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40005800 	.word	0x40005800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48000400 	.word	0x48000400

080020bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_QSPI_MspInit+0x7c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d128      	bne.n	8002130 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_QSPI_MspInit+0x80>)
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_QSPI_MspInit+0x80>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6513      	str	r3, [r2, #80]	; 0x50
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_QSPI_MspInit+0x80>)
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_QSPI_MspInit+0x80>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_QSPI_MspInit+0x80>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_QSPI_MspInit+0x80>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800210e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002112:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002120:	230a      	movs	r3, #10
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <HAL_QSPI_MspInit+0x84>)
 800212c:	f001 faca 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	a0001000 	.word	0xa0001000
 800213c:	40021000 	.word	0x40021000
 8002140:	48001000 	.word	0x48001000

08002144 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_QSPI_MspDeInit+0x30>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10a      	bne.n	800216c <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_QSPI_MspDeInit+0x34>)
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_QSPI_MspDeInit+0x34>)
 800215c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002160:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002162:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_QSPI_MspDeInit+0x38>)
 8002168:	f001 fc54 	bl	8003a14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	a0001000 	.word	0xa0001000
 8002178:	40021000 	.word	0x40021000
 800217c:	48001000 	.word	0x48001000

08002180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d113      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_TIM_Base_MspInit+0x44>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <HAL_TIM_Base_MspInit+0x44>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_TIM_Base_MspInit+0x44>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	201c      	movs	r0, #28
 80021b0:	f000 fab0 	bl	8002714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021b4:	201c      	movs	r0, #28
 80021b6:	f000 fac9 	bl	800274c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_UART_MspInit+0x7c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d127      	bne.n	800223a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_UART_MspInit+0x80>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_UART_MspInit+0x80>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6613      	str	r3, [r2, #96]	; 0x60
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_UART_MspInit+0x80>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_UART_MspInit+0x80>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_UART_MspInit+0x80>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_UART_MspInit+0x80>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222a:	2307      	movs	r3, #7
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_UART_MspInit+0x84>)
 8002236:	f001 fa45 	bl	80036c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013800 	.word	0x40013800
 8002248:	40021000 	.word	0x40021000
 800224c:	48000400 	.word	0x48000400

08002250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	2036      	movs	r0, #54	; 0x36
 8002266:	f000 fa55 	bl	8002714 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800226a:	2036      	movs	r0, #54	; 0x36
 800226c:	f000 fa6e 	bl	800274c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_InitTick+0x9c>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_InitTick+0x9c>)
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_InitTick+0x9c>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002288:	f107 0210 	add.w	r2, r7, #16
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f003 f8d6 	bl	8005444 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002298:	f003 f8a8 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 800229c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_InitTick+0xa0>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	3b01      	subs	r3, #1
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_InitTick+0xa4>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_InitTick+0xa8>)
 80022b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_InitTick+0xa4>)
 80022b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_InitTick+0xa4>)
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_InitTick+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_InitTick+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022cc:	4809      	ldr	r0, [pc, #36]	; (80022f4 <HAL_InitTick+0xa4>)
 80022ce:	f003 fdfb 	bl	8005ec8 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <HAL_InitTick+0xa4>)
 80022da:	f003 feb5 	bl	8006048 <HAL_TIM_Base_Start_IT>
 80022de:	4603      	mov	r3, r0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	200164c0 	.word	0x200164c0
 80022f8:	40001000 	.word	0x40001000

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler+0x4>

08002316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <UsageFault_Handler+0x4>

08002322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <DMA1_Channel3_IRQHandler+0x10>)
 8002362:	f001 f8cf 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000184 	.word	0x20000184

08002370 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA1_Channel4_IRQHandler+0x10>)
 8002376:	f001 f8c5 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000024c 	.word	0x2000024c

08002384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM2_IRQHandler+0x10>)
 800238a:	f003 fecd 	bl	8006128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000294 	.word	0x20000294

08002398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800239c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023a0:	f001 fc44 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <TIM6_DAC_IRQHandler+0x14>)
 80023ae:	f003 febb 	bl	8006128 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <TIM6_DAC_IRQHandler+0x18>)
 80023b4:	f000 fafd 	bl	80029b2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200164c0 	.word	0x200164c0
 80023c0:	200000d0 	.word	0x200000d0

080023c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <_sbrk+0x5c>)
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <_sbrk+0x60>)
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <_sbrk+0x64>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <_sbrk+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d207      	bcs.n	8002404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f4:	f004 fef2 	bl	80071dc <__errno>
 80023f8:	4602      	mov	r2, r0
 80023fa:	230c      	movs	r3, #12
 80023fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002402:	e009      	b.n	8002418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <_sbrk+0x64>)
 8002414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20018000 	.word	0x20018000
 8002424:	00000400 	.word	0x00000400
 8002428:	200000a0 	.word	0x200000a0
 800242c:	20016518 	.word	0x20016518

08002430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <SystemInit+0x64>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <SystemInit+0x64>)
 800243c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <SystemInit+0x68>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <SystemInit+0x68>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <SystemInit+0x68>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <SystemInit+0x68>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <SystemInit+0x68>)
 800245c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002460:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <SystemInit+0x68>)
 8002468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800246c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <SystemInit+0x68>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <SystemInit+0x68>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <SystemInit+0x68>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SystemInit+0x64>)
 8002482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002486:	609a      	str	r2, [r3, #8]
#endif
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	40021000 	.word	0x40021000

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff ffc6 	bl	8002430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024a6:	e003      	b.n	80024b0 <LoopCopyDataInit>

080024a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024ae:	3104      	adds	r1, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024b0:	480a      	ldr	r0, [pc, #40]	; (80024dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024b8:	d3f6      	bcc.n	80024a8 <CopyDataInit>
	ldr	r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024bc:	e002      	b.n	80024c4 <LoopFillZerobss>

080024be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024c0:	f842 3b04 	str.w	r3, [r2], #4

080024c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <LoopForever+0x16>)
	cmp	r2, r3
 80024c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024c8:	d3f9      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f004 fe8d 	bl	80071e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7fe fc13 	bl	8000cf8 <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024d8:	08007c14 	.word	0x08007c14
	ldr	r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024e0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80024e4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80024e8:	20016514 	.word	0x20016514

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>

080024ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f900 	bl	80026fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fea6 	bl	8002250 <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	e001      	b.n	8002514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002510:	f7ff fc20 	bl	8001d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002514:	79fb      	ldrb	r3, [r7, #7]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	2001650c 	.word	0x2001650c

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2001650c 	.word	0x2001650c

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_Delay+0x40>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000008 	.word	0x20000008

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff4c 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002726:	f7ff ff61 	bl	80025ec <__NVIC_GetPriorityGrouping>
 800272a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f7ff ffb1 	bl	8002698 <NVIC_EncodePriority>
 8002736:	4602      	mov	r2, r0
 8002738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff80 	bl	8002644 <__NVIC_SetPriority>
}
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff54 	bl	8002608 <__NVIC_EnableIRQ>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e014      	b.n	80027a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fb06 	bl	8001d9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_DAC_Start_DMA+0x1e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e09e      	b.n	8002908 <HAL_DAC_Start_DMA+0x15c>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2202      	movs	r2, #2
 80027d4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d12a      	bne.n	8002832 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_DAC_Start_DMA+0x164>)
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_DAC_Start_DMA+0x168>)
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a49      	ldr	r2, [pc, #292]	; (8002918 <HAL_DAC_Start_DMA+0x16c>)
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002802:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d009      	beq.n	800281e <HAL_DAC_Start_DMA+0x72>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d00c      	beq.n	8002828 <HAL_DAC_Start_DMA+0x7c>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d000      	beq.n	8002814 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002812:	e039      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3308      	adds	r3, #8
 800281a:	613b      	str	r3, [r7, #16]
        break;
 800281c:	e034      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	613b      	str	r3, [r7, #16]
        break;
 8002826:	e02f      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3310      	adds	r3, #16
 800282e:	613b      	str	r3, [r7, #16]
        break;
 8002830:	e02a      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DAC_Start_DMA+0x170>)
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a38      	ldr	r2, [pc, #224]	; (8002920 <HAL_DAC_Start_DMA+0x174>)
 8002840:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4a37      	ldr	r2, [pc, #220]	; (8002924 <HAL_DAC_Start_DMA+0x178>)
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002858:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d009      	beq.n	8002874 <HAL_DAC_Start_DMA+0xc8>
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00c      	beq.n	800287e <HAL_DAC_Start_DMA+0xd2>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d000      	beq.n	800286a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002868:	e00e      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	613b      	str	r3, [r7, #16]
        break;
 8002872:	e009      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3318      	adds	r3, #24
 800287a:	613b      	str	r3, [r7, #16]
        break;
 800287c:	e004      	b.n	8002888 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	331c      	adds	r3, #28
 8002884:	613b      	str	r3, [r7, #16]
        break;
 8002886:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d111      	bne.n	80028b2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6898      	ldr	r0, [r3, #8]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	f000 fd8e 	bl	80033c8 <HAL_DMA_Start_IT>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
 80028b0:	e010      	b.n	80028d4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68d8      	ldr	r0, [r3, #12]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	f000 fd7c 	bl	80033c8 <HAL_DMA_Start_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	08002cd7 	.word	0x08002cd7
 8002914:	08002cf9 	.word	0x08002cf9
 8002918:	08002d15 	.word	0x08002d15
 800291c:	08002d93 	.word	0x08002d93
 8002920:	08002db5 	.word	0x08002db5
 8002924:	08002dd1 	.word	0x08002dd1

08002928 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2201      	movs	r2, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fd86 	bl	8003488 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e00c      	b.n	80029a8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fd78 	bl	8003488 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029a6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d120      	bne.n	8002a0c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d8:	d118      	bne.n	8002a0c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2204      	movs	r2, #4
 80029de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a04:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f841 	bl	8002a8e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1a:	d120      	bne.n	8002a5e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a2a:	d118      	bne.n	8002a5e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f990 	bl	8002d7e <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	795b      	ldrb	r3, [r3, #5]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_DAC_ConfigChannel+0x1c>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e107      	b.n	8002cce <HAL_DAC_ConfigChannel+0x22c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d174      	bne.n	8002bbc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ad2:	f7ff fd39 	bl	8002548 <HAL_GetTick>
 8002ad6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d134      	bne.n	8002b48 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ade:	e011      	b.n	8002b04 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ae0:	f7ff fd32 	bl	8002548 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d90a      	bls.n	8002b04 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f043 0208 	orr.w	r2, r3, #8
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2203      	movs	r2, #3
 8002afe:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e0e4      	b.n	8002cce <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e6      	bne.n	8002ae0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff fd24 	bl	8002560 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	6992      	ldr	r2, [r2, #24]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
 8002b22:	e01e      	b.n	8002b62 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b24:	f7ff fd10 	bl	8002548 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d90a      	bls.n	8002b48 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f043 0208 	orr.w	r2, r3, #8
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2203      	movs	r2, #3
 8002b42:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0c2      	b.n	8002cce <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	dbe8      	blt.n	8002b24 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7ff fd04 	bl	8002560 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	6992      	ldr	r2, [r2, #24]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	ea02 0103 	and.w	r1, r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	21ff      	movs	r1, #255	; 0xff
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	ea02 0103 	and.w	r1, r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11d      	bne.n	8002c00 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	221f      	movs	r2, #31
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2207      	movs	r2, #7
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	22c0      	movs	r2, #192	; 0xc0
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7fe fbf1 	bl	80014cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	711a      	strb	r2, [r3, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fead 	bl	8002a66 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fea3 	bl	8002a7a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	711a      	strb	r2, [r3, #4]
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ffce 	bl	8002d42 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	711a      	strb	r2, [r3, #4]
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ffc7 	bl	8002d56 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f043 0204 	orr.w	r2, r3, #4
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff ffbd 	bl	8002d6a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	711a      	strb	r2, [r3, #4]
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0ac      	b.n	8002f6c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f9d2 	bl	80031c0 <DFSDM_GetChannelFromInstance>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <HAL_DFSDM_ChannelInit+0x174>)
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e09f      	b.n	8002f6c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff f8b3 	bl	8001f98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_DFSDM_ChannelInit+0x178>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a4f      	ldr	r2, [pc, #316]	; (8002f78 <HAL_DFSDM_ChannelInit+0x178>)
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_DFSDM_ChannelInit+0x178>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d125      	bne.n	8002e90 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4c      	ldr	r2, [pc, #304]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e4e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4948      	ldr	r1, [pc, #288]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e64:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e68:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	791b      	ldrb	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	493f      	ldr	r1, [pc, #252]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_DFSDM_ChannelInit+0x17c>)
 8002e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e8e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e9e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002eae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002eb4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020f 	bic.w	r2, r2, #15
 8002ecc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ef4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 0207 	and.w	r2, r2, #7
 8002f20:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 f930 	bl	80031c0 <DFSDM_GetChannelFromInstance>
 8002f60:	4601      	mov	r1, r0
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_DFSDM_ChannelInit+0x174>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200000a8 	.word	0x200000a8
 8002f78:	200000a4 	.word	0x200000a4
 8002f7c:	40016000 	.word	0x40016000

08002f80 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0ca      	b.n	8003128 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a66      	ldr	r2, [pc, #408]	; (8003130 <HAL_DFSDM_FilterInit+0x1b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d109      	bne.n	8002fb0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d003      	beq.n	8002fac <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0bb      	b.n	8003128 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fe ff5b 	bl	8001e84 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002fdc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7a1b      	ldrb	r3, [r3, #8]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003006:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7a5b      	ldrb	r3, [r3, #9]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e007      	b.n	8003032 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003040:	f023 0308 	bic.w	r3, r3, #8
 8003044:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d108      	bne.n	8003060 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7c1b      	ldrb	r3, [r3, #16]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0210 	orr.w	r2, r2, #16
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0210 	bic.w	r2, r2, #16
 8003088:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7c5b      	ldrb	r3, [r3, #17]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0220 	bic.w	r2, r2, #32
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80030c2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80030c6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6959      	ldr	r1, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80030da:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80030e2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7c1a      	ldrb	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40016100 	.word	0x40016100

08003134 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02e      	beq.n	80031ac <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003154:	2bff      	cmp	r3, #255	; 0xff
 8003156:	d029      	beq.n	80031ac <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10d      	bne.n	800318e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003180:	431a      	orrs	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e00a      	b.n	80031a4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
 80031aa:	e001      	b.n	80031b0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <DFSDM_GetChannelFromInstance+0x7c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d102      	bne.n	80031d6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e02b      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <DFSDM_GetChannelFromInstance+0x80>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d102      	bne.n	80031e4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e024      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a17      	ldr	r2, [pc, #92]	; (8003244 <DFSDM_GetChannelFromInstance+0x84>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e01d      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a14      	ldr	r2, [pc, #80]	; (8003248 <DFSDM_GetChannelFromInstance+0x88>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d102      	bne.n	8003200 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80031fa:	2304      	movs	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e016      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <DFSDM_GetChannelFromInstance+0x8c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d102      	bne.n	800320e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003208:	2305      	movs	r3, #5
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e00f      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <DFSDM_GetChannelFromInstance+0x90>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d102      	bne.n	800321c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003216:	2306      	movs	r3, #6
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e008      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <DFSDM_GetChannelFromInstance+0x94>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d102      	bne.n	800322a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003224:	2307      	movs	r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e001      	b.n	800322e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800322a:	2303      	movs	r3, #3
 800322c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40016000 	.word	0x40016000
 8003240:	40016020 	.word	0x40016020
 8003244:	40016040 	.word	0x40016040
 8003248:	40016080 	.word	0x40016080
 800324c:	400160a0 	.word	0x400160a0
 8003250:	400160c0 	.word	0x400160c0
 8003254:	400160e0 	.word	0x400160e0

08003258 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e098      	b.n	800339c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	4b4d      	ldr	r3, [pc, #308]	; (80033a8 <HAL_DMA_Init+0x150>)
 8003272:	429a      	cmp	r2, r3
 8003274:	d80f      	bhi.n	8003296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <HAL_DMA_Init+0x154>)
 800327e:	4413      	add	r3, r2
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <HAL_DMA_Init+0x158>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a48      	ldr	r2, [pc, #288]	; (80033b4 <HAL_DMA_Init+0x15c>)
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
 8003294:	e00e      	b.n	80032b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_DMA_Init+0x160>)
 800329e:	4413      	add	r3, r2
 80032a0:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <HAL_DMA_Init+0x158>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	009a      	lsls	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a42      	ldr	r2, [pc, #264]	; (80033bc <HAL_DMA_Init+0x164>)
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330e:	d039      	beq.n	8003384 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <HAL_DMA_Init+0x15c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d11a      	bne.n	8003350 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_DMA_Init+0x168>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f003 031c 	and.w	r3, r3, #28
 8003326:	210f      	movs	r1, #15
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	4924      	ldr	r1, [pc, #144]	; (80033c0 <HAL_DMA_Init+0x168>)
 8003330:	4013      	ands	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <HAL_DMA_Init+0x168>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f003 031c 	and.w	r3, r3, #28
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	491d      	ldr	r1, [pc, #116]	; (80033c0 <HAL_DMA_Init+0x168>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
 800334e:	e019      	b.n	8003384 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_DMA_Init+0x16c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f003 031c 	and.w	r3, r3, #28
 800335c:	210f      	movs	r1, #15
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	4917      	ldr	r1, [pc, #92]	; (80033c4 <HAL_DMA_Init+0x16c>)
 8003366:	4013      	ands	r3, r2
 8003368:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_DMA_Init+0x16c>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f003 031c 	and.w	r3, r3, #28
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	4911      	ldr	r1, [pc, #68]	; (80033c4 <HAL_DMA_Init+0x16c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40020407 	.word	0x40020407
 80033ac:	bffdfff8 	.word	0xbffdfff8
 80033b0:	cccccccd 	.word	0xcccccccd
 80033b4:	40020000 	.word	0x40020000
 80033b8:	bffdfbf8 	.word	0xbffdfbf8
 80033bc:	40020400 	.word	0x40020400
 80033c0:	400200a8 	.word	0x400200a8
 80033c4:	400204a8 	.word	0x400204a8

080033c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_DMA_Start_IT+0x20>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e04b      	b.n	8003480 <HAL_DMA_Start_IT+0xb8>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d13a      	bne.n	8003472 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f91e 	bl	8003662 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 020e 	orr.w	r2, r2, #14
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e00f      	b.n	8003460 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 020a 	orr.w	r2, r2, #10
 800345e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e005      	b.n	800347e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d008      	beq.n	80034b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e022      	b.n	80034f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020e 	bic.w	r2, r2, #14
 80034c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f003 021c 	and.w	r2, r3, #28
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f202 	lsl.w	r2, r1, r2
 80034e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 031c 	and.w	r3, r3, #28
 8003524:	2204      	movs	r2, #4
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d026      	beq.n	800357e <HAL_DMA_IRQHandler+0x7a>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d021      	beq.n	800357e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f003 021c 	and.w	r2, r3, #28
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2104      	movs	r1, #4
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d071      	beq.n	8003658 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800357c:	e06c      	b.n	8003658 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f003 031c 	and.w	r3, r3, #28
 8003586:	2202      	movs	r2, #2
 8003588:	409a      	lsls	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02e      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xec>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d029      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 020a 	bic.w	r2, r2, #10
 80035b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f003 021c 	and.w	r2, r3, #28
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2102      	movs	r1, #2
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d038      	beq.n	8003658 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035ee:	e033      	b.n	8003658 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	f003 031c 	and.w	r3, r3, #28
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02a      	beq.n	800365a <HAL_DMA_IRQHandler+0x156>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d025      	beq.n	800365a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 020e 	bic.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f003 021c 	and.w	r2, r3, #28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f202 	lsl.w	r2, r1, r2
 8003630:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003658:	bf00      	nop
 800365a:	bf00      	nop
}
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f003 021c 	and.w	r2, r3, #28
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2101      	movs	r1, #1
 800367e:	fa01 f202 	lsl.w	r2, r1, r2
 8003682:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d108      	bne.n	80036a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036a4:	e007      	b.n	80036b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d2:	e17f      	b.n	80039d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	4013      	ands	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8171 	beq.w	80039ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d00b      	beq.n	800370c <HAL_GPIO_Init+0x48>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003700:	2b11      	cmp	r3, #17
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b12      	cmp	r3, #18
 800370a:	d130      	bne.n	800376e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003742:	2201      	movs	r2, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0201 	and.w	r2, r3, #1
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b03      	cmp	r3, #3
 8003778:	d118      	bne.n	80037ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003780:	2201      	movs	r2, #1
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	f003 0201 	and.w	r2, r3, #1
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x128>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b12      	cmp	r3, #18
 80037ea:	d123      	bne.n	8003834 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	6939      	ldr	r1, [r7, #16]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80ac 	beq.w	80039ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_GPIO_Init+0x32c>)
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_GPIO_Init+0x32c>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6613      	str	r3, [r2, #96]	; 0x60
 8003882:	4b5b      	ldr	r3, [pc, #364]	; (80039f0 <HAL_GPIO_Init+0x32c>)
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800388e:	4a59      	ldr	r2, [pc, #356]	; (80039f4 <HAL_GPIO_Init+0x330>)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038b8:	d025      	beq.n	8003906 <HAL_GPIO_Init+0x242>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <HAL_GPIO_Init+0x334>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x23e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4d      	ldr	r2, [pc, #308]	; (80039fc <HAL_GPIO_Init+0x338>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x23a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	; (8003a00 <HAL_GPIO_Init+0x33c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x236>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_GPIO_Init+0x340>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x232>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_GPIO_Init+0x344>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x22e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a49      	ldr	r2, [pc, #292]	; (8003a0c <HAL_GPIO_Init+0x348>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x22a>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00c      	b.n	8003908 <HAL_GPIO_Init+0x244>
 80038ee:	2307      	movs	r3, #7
 80038f0:	e00a      	b.n	8003908 <HAL_GPIO_Init+0x244>
 80038f2:	2305      	movs	r3, #5
 80038f4:	e008      	b.n	8003908 <HAL_GPIO_Init+0x244>
 80038f6:	2304      	movs	r3, #4
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x244>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x244>
 80038fe:	2302      	movs	r3, #2
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x244>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x244>
 8003906:	2300      	movs	r3, #0
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003918:	4936      	ldr	r1, [pc, #216]	; (80039f4 <HAL_GPIO_Init+0x330>)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800394a:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	43db      	mvns	r3, r3
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_GPIO_Init+0x34c>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3301      	adds	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f47f ae78 	bne.w	80036d4 <HAL_GPIO_Init+0x10>
  }
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40010000 	.word	0x40010000
 80039f8:	48000400 	.word	0x48000400
 80039fc:	48000800 	.word	0x48000800
 8003a00:	48000c00 	.word	0x48000c00
 8003a04:	48001000 	.word	0x48001000
 8003a08:	48001400 	.word	0x48001400
 8003a0c:	48001800 	.word	0x48001800
 8003a10:	40010400 	.word	0x40010400

08003a14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a22:	e0cd      	b.n	8003bc0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a24:	2201      	movs	r2, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80c0 	beq.w	8003bba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003a3a:	4a68      	ldr	r2, [pc, #416]	; (8003bdc <HAL_GPIO_DeInit+0x1c8>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a62:	d025      	beq.n	8003ab0 <HAL_GPIO_DeInit+0x9c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_GPIO_DeInit+0x1cc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01f      	beq.n	8003aac <HAL_GPIO_DeInit+0x98>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a5d      	ldr	r2, [pc, #372]	; (8003be4 <HAL_GPIO_DeInit+0x1d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d019      	beq.n	8003aa8 <HAL_GPIO_DeInit+0x94>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_GPIO_DeInit+0x1d4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_GPIO_DeInit+0x90>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a5b      	ldr	r2, [pc, #364]	; (8003bec <HAL_GPIO_DeInit+0x1d8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00d      	beq.n	8003aa0 <HAL_GPIO_DeInit+0x8c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a5a      	ldr	r2, [pc, #360]	; (8003bf0 <HAL_GPIO_DeInit+0x1dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <HAL_GPIO_DeInit+0x88>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a59      	ldr	r2, [pc, #356]	; (8003bf4 <HAL_GPIO_DeInit+0x1e0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_GPIO_DeInit+0x84>
 8003a94:	2306      	movs	r3, #6
 8003a96:	e00c      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003a98:	2307      	movs	r3, #7
 8003a9a:	e00a      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	e008      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e006      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e004      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e002      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_GPIO_DeInit+0x9e>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	f002 0203 	and.w	r2, r2, #3
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	4093      	lsls	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d132      	bne.n	8003b28 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	494b      	ldr	r1, [pc, #300]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003ad0:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	4947      	ldr	r1, [pc, #284]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003ade:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4944      	ldr	r1, [pc, #272]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <HAL_GPIO_DeInit+0x1e4>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_GPIO_DeInit+0x1c8>)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	3302      	adds	r3, #2
 8003b12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	4830      	ldr	r0, [pc, #192]	; (8003bdc <HAL_GPIO_DeInit+0x1c8>)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	400a      	ands	r2, r1
 8003b22:	3302      	adds	r3, #2
 8003b24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2103      	movs	r1, #3
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	08d2      	lsrs	r2, r2, #3
 8003b5c:	4019      	ands	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2103      	movs	r1, #3
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2103      	movs	r1, #3
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	2101      	movs	r1, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f af2b 	bne.w	8003a24 <HAL_GPIO_DeInit+0x10>
  }
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	48000400 	.word	0x48000400
 8003be4:	48000800 	.word	0x48000800
 8003be8:	48000c00 	.word	0x48000c00
 8003bec:	48001000 	.word	0x48001000
 8003bf0:	48001400 	.word	0x48001400
 8003bf4:	48001800 	.word	0x48001800
 8003bf8:	40010400 	.word	0x40010400

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fbba 	bl	80013c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e081      	b.n	8003d72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe f9d6 	bl	8002034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	e006      	b.n	8003ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d104      	bne.n	8003cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d138      	bne.n	8003e02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e032      	b.n	8003e04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2224      	movs	r2, #36	; 0x24
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d139      	bne.n	8003e9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e033      	b.n	8003e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40007000 	.word	0x40007000

08003ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d130      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d038      	beq.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2232      	movs	r2, #50	; 0x32
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9b      	lsrs	r3, r3, #18
 8003f04:	3301      	adds	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f08:	e002      	b.n	8003f10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1c:	d102      	bne.n	8003f24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f2      	bne.n	8003f0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d110      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e00f      	b.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d007      	beq.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4c:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40007000 	.word	0x40007000
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	431bde83 	.word	0x431bde83

08003f70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7fe fae6 	bl	8002548 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e063      	b.n	8004050 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fe f88d 	bl	80020bc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003fa2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 faf7 	bl	800459a <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2120      	movs	r1, #32
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 faef 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003fdc:	7afb      	ldrb	r3, [r7, #11]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d131      	bne.n	8004046 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f023 0310 	bic.w	r3, r3, #16
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6852      	ldr	r2, [r2, #4]
 8003ff4:	0611      	lsls	r1, r2, #24
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_QSPI_Init+0xe8>)
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6912      	ldr	r2, [r2, #16]
 8004012:	0411      	lsls	r1, r2, #16
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6952      	ldr	r2, [r2, #20]
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6992      	ldr	r2, [r2, #24]
 800401e:	4311      	orrs	r1, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	430b      	orrs	r3, r1
 8004026:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800404e:	7afb      	ldrb	r3, [r7, #11]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	ffe0f8fe 	.word	0xffe0f8fe

0800405c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e016      	b.n	800409c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe f860 	bl	8002144 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7fe fa4a 	bl	8002548 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_QSPI_Command+0x22>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e048      	b.n	8004158 <HAL_QSPI_Command+0xb4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d137      	bne.n	800414a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2120      	movs	r1, #32
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa5f 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d125      	bne.n	800414e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004102:	2200      	movs	r2, #0
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa8c 	bl	8004624 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d115      	bne.n	8004140 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2201      	movs	r2, #1
 800411c:	2102      	movs	r1, #2
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa49 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2202      	movs	r2, #2
 8004134:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800413e:	e006      	b.n	800414e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004148:	e001      	b.n	800414e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7fe f9ea 	bl	8002548 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3320      	adds	r3, #32
 800417c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_QSPI_Transmit+0x2e>
 800418a:	2302      	movs	r3, #2
 800418c:	e07b      	b.n	8004286 <HAL_QSPI_Transmit+0x126>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d16a      	bne.n	8004278 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d05b      	beq.n	8004266 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2212      	movs	r2, #18
 80041b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80041e2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80041e4:	e01b      	b.n	800421e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2201      	movs	r2, #1
 80041ee:	2104      	movs	r1, #4
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f9e0 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80041fa:	7ffb      	ldrb	r3, [r7, #31]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d113      	bne.n	8004228 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1df      	bne.n	80041e6 <HAL_QSPI_Transmit+0x86>
 8004226:	e000      	b.n	800422a <HAL_QSPI_Transmit+0xca>
          break;
 8004228:	bf00      	nop
      }

      if (status == HAL_OK)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d115      	bne.n	800425c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2201      	movs	r2, #1
 8004238:	2102      	movs	r1, #2
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f9bb 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004244:	7ffb      	ldrb	r3, [r7, #31]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f934 	bl	80044c0 <HAL_QSPI_Abort>
 8004258:	4603      	mov	r3, r0
 800425a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004264:	e00a      	b.n	800427c <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	f043 0208 	orr.w	r2, r3, #8
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e001      	b.n	800427c <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08a      	sub	sp, #40	; 0x28
 8004292:	af02      	add	r7, sp, #8
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800429e:	f7fe f953 	bl	8002548 <HAL_GetTick>
 80042a2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3320      	adds	r3, #32
 80042b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_QSPI_Receive+0x36>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e082      	b.n	80043ca <HAL_QSPI_Receive+0x13c>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d171      	bne.n	80043bc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d062      	beq.n	80043aa <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2222      	movs	r2, #34	; 0x22
 80042e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800431c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004326:	e01c      	b.n	8004362 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2201      	movs	r2, #1
 8004330:	2106      	movs	r1, #6
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f93f 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800433c:	7ffb      	ldrb	r3, [r7, #31]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d114      	bne.n	800436c <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1de      	bne.n	8004328 <HAL_QSPI_Receive+0x9a>
 800436a:	e000      	b.n	800436e <HAL_QSPI_Receive+0xe0>
          break;
 800436c:	bf00      	nop
      }

      if (status == HAL_OK)
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d115      	bne.n	80043a0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2201      	movs	r2, #1
 800437c:	2102      	movs	r1, #2
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f919 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2202      	movs	r2, #2
 8004394:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f892 	bl	80044c0 <HAL_QSPI_Abort>
 800439c:	4603      	mov	r3, r0
 800439e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80043a8:	e00a      	b.n	80043c0 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	f043 0208 	orr.w	r2, r3, #8
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e001      	b.n	80043c0 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b088      	sub	sp, #32
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7fe f8b2 	bl	8002548 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_QSPI_AutoPolling+0x24>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e060      	b.n	80044b8 <HAL_QSPI_AutoPolling+0xe6>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d14f      	bne.n	80044aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2242      	movs	r2, #66	; 0x42
 8004414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2200      	movs	r2, #0
 8004420:	2120      	movs	r1, #32
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f8c7 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d13d      	bne.n	80044ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004468:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f8d3 	bl	8004624 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2201      	movs	r2, #1
 8004486:	2108      	movs	r1, #8
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f894 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2208      	movs	r2, #8
 800449e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80044a8:	e001      	b.n	80044ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
 80044ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7fe f83c 	bl	8002548 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d056      	beq.n	8004590 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d017      	beq.n	8004528 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe ffbb 	bl	8003488 <HAL_DMA_Abort>
 8004512:	4603      	mov	r3, r0
 8004514:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0202 	orr.w	r2, r2, #2
 8004536:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2201      	movs	r2, #1
 8004542:	2102      	movs	r1, #2
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f836 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10e      	bne.n	8004572 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2202      	movs	r2, #2
 800455a:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	2120      	movs	r1, #32
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f824 	bl	80045b6 <QSPI_WaitFlagStateUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004586:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045c6:	e01a      	b.n	80045fe <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ce:	d016      	beq.n	80045fe <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d0:	f7fd ffba 	bl	8002548 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2204      	movs	r2, #4
 80045ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00e      	b.n	800461c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d1d6      	bne.n	80045c8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <QSPI_Config+0x28>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800463e:	d005      	beq.n	800464c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3a01      	subs	r2, #1
 800464a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80b9 	beq.w	80047c8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d05f      	beq.n	800471e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	6892      	ldr	r2, [r2, #8]
 8004666:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d031      	beq.n	80046d4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	431a      	orrs	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	431a      	orrs	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	431a      	orrs	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	049b      	lsls	r3, r3, #18
 800468c:	431a      	orrs	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	431a      	orrs	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046c4:	f000 812e 	beq.w	8004924 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6852      	ldr	r2, [r2, #4]
 80046d0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80046d2:	e127      	b.n	8004924 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	431a      	orrs	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	049b      	lsls	r3, r3, #18
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	431a      	orrs	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	431a      	orrs	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	ea42 0103 	orr.w	r1, r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	430a      	orrs	r2, r1
 800471a:	615a      	str	r2, [r3, #20]
}
 800471c:	e102      	b.n	8004924 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02e      	beq.n	8004784 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	431a      	orrs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	431a      	orrs	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	049b      	lsls	r3, r3, #18
 8004742:	431a      	orrs	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	431a      	orrs	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	431a      	orrs	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	ea42 0103 	orr.w	r1, r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	430a      	orrs	r2, r1
 800476c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004774:	f000 80d6 	beq.w	8004924 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	e0cf      	b.n	8004924 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	431a      	orrs	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	431a      	orrs	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	431a      	orrs	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	049b      	lsls	r3, r3, #18
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	ea42 0103 	orr.w	r1, r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	e0ad      	b.n	8004924 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d058      	beq.n	8004882 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02d      	beq.n	800483e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	049b      	lsls	r3, r3, #18
 80047fe:	431a      	orrs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	431a      	orrs	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	431a      	orrs	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	430a      	orrs	r2, r1
 8004828:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004830:	d078      	beq.n	8004924 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	6852      	ldr	r2, [r2, #4]
 800483a:	619a      	str	r2, [r3, #24]
}
 800483c:	e072      	b.n	8004924 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	431a      	orrs	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	431a      	orrs	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	049b      	lsls	r3, r3, #18
 800485a:	431a      	orrs	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	431a      	orrs	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	431a      	orrs	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	ea42 0103 	orr.w	r1, r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	430a      	orrs	r2, r1
 800487e:	615a      	str	r2, [r3, #20]
}
 8004880:	e050      	b.n	8004924 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02a      	beq.n	80048e0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	431a      	orrs	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	431a      	orrs	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	431a      	orrs	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	049b      	lsls	r3, r3, #18
 80048a6:	431a      	orrs	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	ea42 0103 	orr.w	r1, r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80048d2:	d027      	beq.n	8004924 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	6852      	ldr	r2, [r2, #4]
 80048dc:	619a      	str	r2, [r3, #24]
}
 80048de:	e021      	b.n	8004924 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01d      	beq.n	8004924 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	049b      	lsls	r3, r3, #18
 8004904:	431a      	orrs	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	431a      	orrs	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	ea42 0103 	orr.w	r1, r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	430a      	orrs	r2, r1
 8004922:	615a      	str	r2, [r3, #20]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e3d4      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004942:	4ba1      	ldr	r3, [pc, #644]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494c:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80e4 	beq.w	8004b2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_RCC_OscConfig+0x4a>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	f040 808b 	bne.w	8004a88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 8087 	bne.w	8004a88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497a:	4b93      	ldr	r3, [pc, #588]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e3ac      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	4b8c      	ldr	r3, [pc, #560]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCC_OscConfig+0x7c>
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049aa:	e005      	b.n	80049b8 <HAL_RCC_OscConfig+0x88>
 80049ac:	4b86      	ldr	r3, [pc, #536]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d223      	bcs.n	8004a04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd71 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e38d      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d0:	4b7d      	ldr	r3, [pc, #500]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7c      	ldr	r2, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049d6:	f043 0308 	orr.w	r3, r3, #8
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b7a      	ldr	r3, [pc, #488]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4977      	ldr	r1, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	4972      	ldr	r1, [pc, #456]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
 8004a02:	e025      	b.n	8004a50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a04:	4b70      	ldr	r3, [pc, #448]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6f      	ldr	r2, [pc, #444]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	496a      	ldr	r1, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a22:	4b69      	ldr	r3, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	4965      	ldr	r1, [pc, #404]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fd31 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e34d      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a50:	f000 fc36 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8004a54:	4601      	mov	r1, r0
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	4a5a      	ldr	r2, [pc, #360]	; (8004bcc <HAL_RCC_OscConfig+0x29c>)
 8004a62:	5cd3      	ldrb	r3, [r2, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa21 f303 	lsr.w	r3, r1, r3
 8004a6c:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <HAL_RCC_OscConfig+0x2a0>)
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a70:	4b58      	ldr	r3, [pc, #352]	; (8004bd4 <HAL_RCC_OscConfig+0x2a4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd fbeb 	bl	8002250 <HAL_InitTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d052      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	e331      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d032      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a90:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a4c      	ldr	r2, [pc, #304]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fd54 	bl	8002548 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fd50 	bl	8002548 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e31a      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab6:	4b44      	ldr	r3, [pc, #272]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	493b      	ldr	r1, [pc, #236]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae0:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	4936      	ldr	r1, [pc, #216]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	e01a      	b.n	8004b2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a33      	ldr	r2, [pc, #204]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b02:	f7fd fd21 	bl	8002548 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0a:	f7fd fd1d 	bl	8002548 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e2e7      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x1da>
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d074      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x21a>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d10e      	bne.n	8004b62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d064      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d160      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e2c4      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x24a>
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e01d      	b.n	8004bb6 <HAL_RCC_OscConfig+0x286>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCC_OscConfig+0x26e>
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x286>
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <HAL_RCC_OscConfig+0x298>)
 8004bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fd fcc3 	bl	8002548 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc4:	e011      	b.n	8004bea <HAL_RCC_OscConfig+0x2ba>
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	080073b8 	.word	0x080073b8
 8004bd0:	20000000 	.word	0x20000000
 8004bd4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fd fcb6 	bl	8002548 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e280      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4baf      	ldr	r3, [pc, #700]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x2a8>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fca6 	bl	8002548 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fd fca2 	bl	8002548 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	; 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e26c      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	4ba5      	ldr	r3, [pc, #660]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2d0>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d060      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x310>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d116      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	4b99      	ldr	r3, [pc, #612]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x328>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e249      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b93      	ldr	r3, [pc, #588]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4990      	ldr	r1, [pc, #576]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6c:	e040      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d023      	beq.n	8004cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c76:	4b8c      	ldr	r3, [pc, #560]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a8b      	ldr	r2, [pc, #556]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd fc61 	bl	8002548 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fd fc5d 	bl	8002548 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e227      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9c:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b7f      	ldr	r3, [pc, #508]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	497c      	ldr	r1, [pc, #496]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b7a      	ldr	r3, [pc, #488]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a79      	ldr	r2, [pc, #484]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fd fc3d 	bl	8002548 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fd fc39 	bl	8002548 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e203      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce4:	4b70      	ldr	r3, [pc, #448]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d04:	4b68      	ldr	r3, [pc, #416]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0a:	4a67      	ldr	r2, [pc, #412]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd fc18 	bl	8002548 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fd fc14 	bl	8002548 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e1de      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3ec>
 8004d3c:	e01b      	b.n	8004d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d44:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fd fbfb 	bl	8002548 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fd fbf7 	bl	8002548 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1c1      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d68:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d88:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	4a43      	ldr	r2, [pc, #268]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <HAL_RCC_OscConfig+0x57c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d118      	bne.n	8004dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_RCC_OscConfig+0x57c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <HAL_RCC_OscConfig+0x57c>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fbbe 	bl	8002548 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7fd fbba 	bl	8002548 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e184      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de2:	4b32      	ldr	r3, [pc, #200]	; (8004eac <HAL_RCC_OscConfig+0x57c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4d8>
 8004df6:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e06:	e024      	b.n	8004e52 <HAL_RCC_OscConfig+0x522>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d110      	bne.n	8004e32 <HAL_RCC_OscConfig+0x502>
 8004e10:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e20:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e30:	e00f      	b.n	8004e52 <HAL_RCC_OscConfig+0x522>
 8004e32:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e42:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7fd fb75 	bl	8002548 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e62:	f7fd fb71 	bl	8002548 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e139      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_OscConfig+0x578>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ed      	beq.n	8004e62 <HAL_RCC_OscConfig+0x532>
 8004e86:	e01a      	b.n	8004ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd fb5e 	bl	8002548 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e8e:	e00f      	b.n	8004eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7fd fb5a 	bl	8002548 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d906      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e122      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	4b90      	ldr	r3, [pc, #576]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e8      	bne.n	8004e90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b8b      	ldr	r3, [pc, #556]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	4a8a      	ldr	r2, [pc, #552]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8108 	beq.w	80050ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f040 80d0 	bne.w	8005084 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ee4:	4b83      	ldr	r3, [pc, #524]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d130      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	3b01      	subs	r3, #1
 8004f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d127      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f24:	2a07      	cmp	r2, #7
 8004f26:	bf14      	ite	ne
 8004f28:	2201      	movne	r2, #1
 8004f2a:	2200      	moveq	r2, #0
 8004f2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d113      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	3b01      	subs	r3, #1
 8004f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d06e      	beq.n	8005038 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d069      	beq.n	8005034 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f60:	4b64      	ldr	r3, [pc, #400]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f6c:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0b7      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b5d      	ldr	r3, [pc, #372]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f88:	f7fd fade 	bl	8002548 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fd fada 	bl	8002548 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0a4      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa2:	4b54      	ldr	r3, [pc, #336]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fae:	4b51      	ldr	r3, [pc, #324]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCC_OscConfig+0x7c8>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	4311      	orrs	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fc8:	0212      	lsls	r2, r2, #8
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fd0:	0852      	lsrs	r2, r2, #1
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	0552      	lsls	r2, r2, #21
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fdc:	0852      	lsrs	r2, r2, #1
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0652      	lsls	r2, r2, #25
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fe8:	0912      	lsrs	r2, r2, #4
 8004fea:	0452      	lsls	r2, r2, #17
 8004fec:	430a      	orrs	r2, r1
 8004fee:	4941      	ldr	r1, [pc, #260]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3e      	ldr	r2, [pc, #248]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005000:	4b3c      	ldr	r3, [pc, #240]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a3b      	ldr	r2, [pc, #236]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800500c:	f7fd fa9c 	bl	8002548 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fd fa98 	bl	8002548 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e062      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005032:	e05a      	b.n	80050ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e059      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005038:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d152      	bne.n	80050ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800505c:	f7fd fa74 	bl	8002548 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd fa70 	bl	8002548 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e03a      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x734>
 8005082:	e032      	b.n	80050ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b0c      	cmp	r3, #12
 8005088:	d02d      	beq.n	80050e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005094:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005096:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d105      	bne.n	80050ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 80050b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050be:	f7fd fa43 	bl	8002548 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c6:	f7fd fa3f 	bl	8002548 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e009      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_OscConfig+0x7c4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x796>
 80050e4:	e001      	b.n	80050ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	f99d808c 	.word	0xf99d808c

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0c8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d910      	bls.n	8005140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0207 	bic.w	r2, r3, #7
 8005126:	4961      	ldr	r1, [pc, #388]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b5f      	ldr	r3, [pc, #380]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0b0      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d04c      	beq.n	80051e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d107      	bne.n	8005164 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005154:	4b56      	ldr	r3, [pc, #344]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d121      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e09e      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d107      	bne.n	800517c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d115      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e092      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e086      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005194:	4b46      	ldr	r3, [pc, #280]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e07e      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051a4:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 0203 	bic.w	r2, r3, #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	493f      	ldr	r1, [pc, #252]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fd f9c7 	bl	8002548 <HAL_GetTick>
 80051ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051bc:	e00a      	b.n	80051d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051be:	f7fd f9c3 	bl	8002548 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e066      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 020c 	and.w	r2, r3, #12
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d1eb      	bne.n	80051be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d008      	beq.n	8005204 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	492c      	ldr	r1, [pc, #176]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005204:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d210      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0207 	bic.w	r2, r3, #7
 800521a:	4924      	ldr	r1, [pc, #144]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x1b0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e036      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005240:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4918      	ldr	r1, [pc, #96]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4910      	ldr	r1, [pc, #64]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005272:	f000 f825 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8005276:	4601      	mov	r1, r0
 8005278:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <HAL_RCC_ClockConfig+0x1b4>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	5cd3      	ldrb	r3, [r2, r3]
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	fa21 f303 	lsr.w	r3, r1, r3
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc ffda 	bl	8002250 <HAL_InitTick>
 800529c:	4603      	mov	r3, r0
 800529e:	72fb      	strb	r3, [r7, #11]

  return status;
 80052a0:	7afb      	ldrb	r3, [r7, #11]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40022000 	.word	0x40022000
 80052b0:	40021000 	.word	0x40021000
 80052b4:	080073b8 	.word	0x080073b8
 80052b8:	20000000 	.word	0x20000000
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ce:	4b3d      	ldr	r3, [pc, #244]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d8:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x34>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d121      	bne.n	8005332 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d11e      	bne.n	8005332 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052f4:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e005      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005310:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005324:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10d      	bne.n	8005348 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d102      	bne.n	800533e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005338:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	e004      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d101      	bne.n	8005348 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005344:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005346:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d133      	bne.n	80053b6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800534e:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d002      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0xa4>
 800535e:	2b03      	cmp	r3, #3
 8005360:	d003      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0xaa>
 8005362:	e005      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005366:	617b      	str	r3, [r7, #20]
      break;
 8005368:	e005      	b.n	8005376 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800536c:	617b      	str	r3, [r7, #20]
      break;
 800536e:	e002      	b.n	8005376 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	617b      	str	r3, [r7, #20]
      break;
 8005374:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	3301      	adds	r3, #1
 8005382:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	fb02 f203 	mul.w	r2, r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	0e5b      	lsrs	r3, r3, #25
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053b6:	69bb      	ldr	r3, [r7, #24]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3724      	adds	r7, #36	; 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40021000 	.word	0x40021000
 80053c8:	080073d0 	.word	0x080073d0
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	007a1200 	.word	0x007a1200

080053d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000000 	.word	0x20000000

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 80053f4:	4601      	mov	r1, r0
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	080073c8 	.word	0x080073c8

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800541c:	f7ff ffda 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 8005420:	4601      	mov	r1, r0
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0adb      	lsrs	r3, r3, #11
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021000 	.word	0x40021000
 8005440:	080073c8 	.word	0x080073c8

08005444 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	220f      	movs	r2, #15
 8005452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0203 	and.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <HAL_RCC_GetClockConfig+0x60>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0207 	and.w	r2, r3, #7
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40022000 	.word	0x40022000

080054a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054b4:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054c0:	f7fe fcf2 	bl	8003ea8 <HAL_PWREx_GetVoltageRange>
 80054c4:	6178      	str	r0, [r7, #20]
 80054c6:	e014      	b.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c8:	4b25      	ldr	r3, [pc, #148]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	4a24      	ldr	r2, [pc, #144]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6593      	str	r3, [r2, #88]	; 0x58
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e0:	f7fe fce2 	bl	8003ea8 <HAL_PWREx_GetVoltageRange>
 80054e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d10b      	bne.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d919      	bls.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2ba0      	cmp	r3, #160	; 0xa0
 8005504:	d902      	bls.n	800550c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005506:	2302      	movs	r3, #2
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e013      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e010      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d902      	bls.n	800551e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005518:	2303      	movs	r3, #3
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e00a      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d102      	bne.n	800552a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005524:	2302      	movs	r3, #2
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e004      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d101      	bne.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005530:	2301      	movs	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 0207 	bic.w	r2, r3, #7
 800553c:	4909      	ldr	r1, [pc, #36]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	40022000 	.word	0x40022000

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005570:	2300      	movs	r3, #0
 8005572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005574:	2300      	movs	r3, #0
 8005576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005580:	2b00      	cmp	r3, #0
 8005582:	d03f      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558c:	d01c      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800558e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005592:	d802      	bhi.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00e      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005598:	e01f      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800559a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80055a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055a4:	d01c      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80055a6:	e018      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055a8:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a84      	ldr	r2, [pc, #528]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b4:	e015      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fab9 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c6:	e00c      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3320      	adds	r3, #32
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fba0 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055d8:	e003      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	74fb      	strb	r3, [r7, #19]
      break;
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80055e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f6:	4972      	ldr	r1, [pc, #456]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055fe:	e001      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d03f      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	d01c      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800561a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800561e:	d802      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005624:	e01f      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800562a:	d003      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800562c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005630:	d01c      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005632:	e018      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005634:	4b62      	ldr	r3, [pc, #392]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a61      	ldr	r2, [pc, #388]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800563a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005640:	e015      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3304      	adds	r3, #4
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fa73 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005652:	e00c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3320      	adds	r3, #32
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fb5a 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005664:	e003      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	74fb      	strb	r3, [r7, #19]
      break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800566c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005674:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005682:	494f      	ldr	r1, [pc, #316]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800568a:	e001      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a0 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056a2:	4b47      	ldr	r3, [pc, #284]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	4a40      	ldr	r2, [pc, #256]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6593      	str	r3, [r2, #88]	; 0x58
 80056c4:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d0:	2301      	movs	r3, #1
 80056d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d4:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a3a      	ldr	r2, [pc, #232]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e0:	f7fc ff32 	bl	8002548 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056e6:	e009      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fc ff2e 	bl	8002548 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d902      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	74fb      	strb	r3, [r7, #19]
        break;
 80056fa:	e005      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ef      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d15c      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800570e:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005718:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01f      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	d019      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fc feed 	bl	8002548 <HAL_GetTick>
 800576e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005770:	e00b      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005772:	f7fc fee9 	bl	8002548 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	4293      	cmp	r3, r2
 8005782:	d902      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	74fb      	strb	r3, [r7, #19]
            break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ec      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	4904      	ldr	r1, [pc, #16]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057b6:	e009      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057cc:	7c7b      	ldrb	r3, [r7, #17]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b9e      	ldr	r3, [pc, #632]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	4a9d      	ldr	r2, [pc, #628]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ea:	4b98      	ldr	r3, [pc, #608]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f023 0203 	bic.w	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	4994      	ldr	r1, [pc, #592]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800580c:	4b8f      	ldr	r3, [pc, #572]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 020c 	bic.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	498c      	ldr	r1, [pc, #560]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800582e:	4b87      	ldr	r3, [pc, #540]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	4983      	ldr	r1, [pc, #524]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005850:	4b7e      	ldr	r3, [pc, #504]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	497b      	ldr	r1, [pc, #492]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005872:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005880:	4972      	ldr	r1, [pc, #456]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005894:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	496a      	ldr	r1, [pc, #424]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058b6:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	4961      	ldr	r1, [pc, #388]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058d8:	4b5c      	ldr	r3, [pc, #368]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e6:	4959      	ldr	r1, [pc, #356]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058fa:	4b54      	ldr	r3, [pc, #336]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	4950      	ldr	r1, [pc, #320]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	4948      	ldr	r1, [pc, #288]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800593e:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	493f      	ldr	r1, [pc, #252]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d028      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	4937      	ldr	r1, [pc, #220]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597e:	d106      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a31      	ldr	r2, [pc, #196]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
 800598c:	e011      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005996:	d10c      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2101      	movs	r1, #1
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f8c8 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d028      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	491f      	ldr	r1, [pc, #124]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059dc:	d106      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059de:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e8:	60d3      	str	r3, [r2, #12]
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2101      	movs	r1, #1
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f899 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02b      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	4908      	ldr	r1, [pc, #32]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3a:	d109      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a02      	ldr	r2, [pc, #8]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a46:	60d3      	str	r3, [r2, #12]
 8005a48:	e014      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f867 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02f      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a80:	4b2b      	ldr	r3, [pc, #172]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8e:	4928      	ldr	r1, [pc, #160]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f844 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005ab6:	7cfb      	ldrb	r3, [r7, #19]
 8005ab8:	74bb      	strb	r3, [r7, #18]
 8005aba:	e011      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f921 	bl	8005d14 <RCCEx_PLLSAI2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	490d      	ldr	r1, [pc, #52]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1e:	4904      	ldr	r1, [pc, #16]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b26:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021000 	.word	0x40021000

08005b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b42:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b4e:	4b70      	ldr	r3, [pc, #448]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0203 	and.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d10d      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
       ||
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b66:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
       ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d044      	beq.n	8005c04 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
 8005b7e:	e041      	b.n	8005c04 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d00c      	beq.n	8005ba2 <RCCEx_PLLSAI1_Config+0x6e>
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d013      	beq.n	8005bb4 <RCCEx_PLLSAI1_Config+0x80>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d120      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b90:	4b5f      	ldr	r3, [pc, #380]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba0:	e01a      	b.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ba2:	4b5b      	ldr	r3, [pc, #364]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb2:	e013      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bb4:	4b56      	ldr	r3, [pc, #344]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10f      	bne.n	8005be0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bc0:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bd0:	e006      	b.n	8005be0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd6:	e004      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005bd8:	bf00      	nop
 8005bda:	e002      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005bdc:	bf00      	nop
 8005bde:	e000      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005be0:	bf00      	nop
    }

    if(status == HAL_OK)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10d      	bne.n	8005c04 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005be8:	4b49      	ldr	r3, [pc, #292]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	4944      	ldr	r1, [pc, #272]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d17d      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a40      	ldr	r2, [pc, #256]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c16:	f7fc fc97 	bl	8002548 <HAL_GetTick>
 8005c1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c1c:	e009      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c1e:	f7fc fc93 	bl	8002548 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d902      	bls.n	8005c32 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	73fb      	strb	r3, [r7, #15]
        break;
 8005c30:	e005      	b.n	8005c3e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c32:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1ef      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d160      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d111      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6892      	ldr	r2, [r2, #8]
 8005c5a:	0211      	lsls	r1, r2, #8
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68d2      	ldr	r2, [r2, #12]
 8005c60:	0912      	lsrs	r2, r2, #4
 8005c62:	0452      	lsls	r2, r2, #17
 8005c64:	430a      	orrs	r2, r1
 8005c66:	492a      	ldr	r1, [pc, #168]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	610b      	str	r3, [r1, #16]
 8005c6c:	e027      	b.n	8005cbe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d112      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c74:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6892      	ldr	r2, [r2, #8]
 8005c84:	0211      	lsls	r1, r2, #8
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6912      	ldr	r2, [r2, #16]
 8005c8a:	0852      	lsrs	r2, r2, #1
 8005c8c:	3a01      	subs	r2, #1
 8005c8e:	0552      	lsls	r2, r2, #21
 8005c90:	430a      	orrs	r2, r1
 8005c92:	491f      	ldr	r1, [pc, #124]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
 8005c98:	e011      	b.n	8005cbe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ca2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6892      	ldr	r2, [r2, #8]
 8005caa:	0211      	lsls	r1, r2, #8
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6952      	ldr	r2, [r2, #20]
 8005cb0:	0852      	lsrs	r2, r2, #1
 8005cb2:	3a01      	subs	r2, #1
 8005cb4:	0652      	lsls	r2, r2, #25
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	4915      	ldr	r1, [pc, #84]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cca:	f7fc fc3d 	bl	8002548 <HAL_GetTick>
 8005cce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd0:	e009      	b.n	8005ce6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd2:	f7fc fc39 	bl	8002548 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d902      	bls.n	8005ce6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ce4:	e005      	b.n	8005cf2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ef      	beq.n	8005cd2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	4903      	ldr	r1, [pc, #12]	; (8005d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000

08005d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d22:	4b68      	ldr	r3, [pc, #416]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d2e:	4b65      	ldr	r3, [pc, #404]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10d      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
       ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d46:	4b5f      	ldr	r3, [pc, #380]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
       ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d044      	beq.n	8005de4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e041      	b.n	8005de4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d00c      	beq.n	8005d82 <RCCEx_PLLSAI2_Config+0x6e>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d013      	beq.n	8005d94 <RCCEx_PLLSAI2_Config+0x80>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d120      	bne.n	8005db2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d70:	4b54      	ldr	r3, [pc, #336]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11d      	bne.n	8005db8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d80:	e01a      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d82:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d116      	bne.n	8005dbc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d92:	e013      	b.n	8005dbc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005da0:	4b48      	ldr	r3, [pc, #288]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005db0:	e006      	b.n	8005dc0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e004      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005dc0:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	4939      	ldr	r1, [pc, #228]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d167      	bne.n	8005eba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a35      	ldr	r2, [pc, #212]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df6:	f7fc fba7 	bl	8002548 <HAL_GetTick>
 8005dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dfc:	e009      	b.n	8005e12 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dfe:	f7fc fba3 	bl	8002548 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d902      	bls.n	8005e12 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	73fb      	strb	r3, [r7, #15]
        break;
 8005e10:	e005      	b.n	8005e1e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e12:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ef      	bne.n	8005dfe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d14a      	bne.n	8005eba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d111      	bne.n	8005e4e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e2a:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6892      	ldr	r2, [r2, #8]
 8005e3a:	0211      	lsls	r1, r2, #8
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68d2      	ldr	r2, [r2, #12]
 8005e40:	0912      	lsrs	r2, r2, #4
 8005e42:	0452      	lsls	r2, r2, #17
 8005e44:	430a      	orrs	r2, r1
 8005e46:	491f      	ldr	r1, [pc, #124]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	614b      	str	r3, [r1, #20]
 8005e4c:	e011      	b.n	8005e72 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6892      	ldr	r2, [r2, #8]
 8005e5e:	0211      	lsls	r1, r2, #8
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6912      	ldr	r2, [r2, #16]
 8005e64:	0852      	lsrs	r2, r2, #1
 8005e66:	3a01      	subs	r2, #1
 8005e68:	0652      	lsls	r2, r2, #25
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	4915      	ldr	r1, [pc, #84]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7e:	f7fc fb63 	bl	8002548 <HAL_GetTick>
 8005e82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e84:	e009      	b.n	8005e9a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e86:	f7fc fb5f 	bl	8002548 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d902      	bls.n	8005e9a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	73fb      	strb	r3, [r7, #15]
          break;
 8005e98:	e005      	b.n	8005ea6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ef      	beq.n	8005e86 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d106      	bne.n	8005eba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	4903      	ldr	r1, [pc, #12]	; (8005ec4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40021000 	.word	0x40021000

08005ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e049      	b.n	8005f6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc f946 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f000 fb0e 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e047      	b.n	8006020 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <HAL_TIM_Base_Start+0xb4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d018      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <HAL_TIM_Base_Start+0xb8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_TIM_Base_Start+0xbc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <HAL_TIM_Base_Start+0xc0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_TIM_Base_Start+0xc4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIM_Base_Start+0x66>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	; (8006040 <HAL_TIM_Base_Start+0xc8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d115      	bne.n	800600a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	4b17      	ldr	r3, [pc, #92]	; (8006044 <HAL_TIM_Base_Start+0xcc>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d015      	beq.n	800601c <HAL_TIM_Base_Start+0xa4>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff6:	d011      	beq.n	800601c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	e008      	b.n	800601c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e000      	b.n	800601e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	00010007 	.word	0x00010007

08006048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d001      	beq.n	8006060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e04f      	b.n	8006100 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <HAL_TIM_Base_Start_IT+0xc4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608a:	d018      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_TIM_Base_Start_IT+0xc8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <HAL_TIM_Base_Start_IT+0xcc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIM_Base_Start_IT+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIM_Base_Start_IT+0xd4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x76>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d115      	bne.n	80060ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	4b17      	ldr	r3, [pc, #92]	; (8006124 <HAL_TIM_Base_Start_IT+0xdc>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d015      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0xb4>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d011      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	e008      	b.n	80060fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e000      	b.n	80060fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40014000 	.word	0x40014000
 8006124:	00010007 	.word	0x00010007

08006128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d122      	bne.n	8006184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d11b      	bne.n	8006184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0202 	mvn.w	r2, #2
 8006154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9be 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f9b0 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f9c1 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b04      	cmp	r3, #4
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0204 	mvn.w	r2, #4
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f994 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f986 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f997 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0208 	mvn.w	r2, #8
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2204      	movs	r2, #4
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f96a 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f95c 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f96d 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b10      	cmp	r3, #16
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b10      	cmp	r3, #16
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0210 	mvn.w	r2, #16
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2208      	movs	r2, #8
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f940 	bl	80064ec <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f932 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f943 	bl	8006500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0201 	mvn.w	r2, #1
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fb f94a 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faee 	bl	80068b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b80      	cmp	r3, #128	; 0x80
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fae1 	bl	80068c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d10e      	bne.n	8006332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d107      	bne.n	8006332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f8f1 	bl	8006514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d10e      	bne.n	800635e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d107      	bne.n	800635e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0220 	mvn.w	r2, #32
 8006356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 faa1 	bl	80068a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800635e:	bf00      	nop
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_TIM_ConfigClockSource+0x18>
 800637a:	2302      	movs	r3, #2
 800637c:	e0a8      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x16a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d067      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x124>
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d80b      	bhi.n	80063d6 <HAL_TIM_ConfigClockSource+0x70>
 80063be:	2b10      	cmp	r3, #16
 80063c0:	d073      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x144>
 80063c2:	2b10      	cmp	r3, #16
 80063c4:	d802      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0x66>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d06f      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063ca:	e078      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d06c      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x144>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d06a      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x144>
      break;
 80063d4:	e073      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063d6:	2b70      	cmp	r3, #112	; 0x70
 80063d8:	d00d      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0x90>
 80063da:	2b70      	cmp	r3, #112	; 0x70
 80063dc:	d804      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x82>
 80063de:	2b50      	cmp	r3, #80	; 0x50
 80063e0:	d033      	beq.n	800644a <HAL_TIM_ConfigClockSource+0xe4>
 80063e2:	2b60      	cmp	r3, #96	; 0x60
 80063e4:	d041      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80063e6:	e06a      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ec:	d066      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0x156>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f2:	d017      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80063f4:	e063      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6899      	ldr	r1, [r3, #8]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f000 f9a3 	bl	8006750 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006418:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	609a      	str	r2, [r3, #8]
      break;
 8006422:	e04c      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6899      	ldr	r1, [r3, #8]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f000 f98c 	bl	8006750 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006446:	609a      	str	r2, [r3, #8]
      break;
 8006448:	e039      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6859      	ldr	r1, [r3, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	461a      	mov	r2, r3
 8006458:	f000 f900 	bl	800665c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2150      	movs	r1, #80	; 0x50
 8006462:	4618      	mov	r0, r3
 8006464:	f000 f959 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8006468:	e029      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	461a      	mov	r2, r3
 8006478:	f000 f91f 	bl	80066ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2160      	movs	r1, #96	; 0x60
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f949 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8006488:	e019      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	461a      	mov	r2, r3
 8006498:	f000 f8e0 	bl	800665c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f939 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 80064a8:	e009      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f000 f930 	bl	800671a <TIM_ITRx_SetConfig>
        break;
 80064ba:	e000      	b.n	80064be <HAL_TIM_ConfigClockSource+0x158>
      break;
 80064bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <TIM_Base_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3d      	ldr	r2, [pc, #244]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2f      	ldr	r2, [pc, #188]	; (800663c <TIM_Base_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d01b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2c      	ldr	r2, [pc, #176]	; (8006640 <TIM_Base_SetConfig+0x118>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2b      	ldr	r2, [pc, #172]	; (8006644 <TIM_Base_SetConfig+0x11c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <TIM_Base_SetConfig+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0x124>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_Base_SetConfig+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a27      	ldr	r2, [pc, #156]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a26      	ldr	r2, [pc, #152]	; (8006658 <TIM_Base_SetConfig+0x130>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <TIM_Base_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a12      	ldr	r2, [pc, #72]	; (800664c <TIM_Base_SetConfig+0x124>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00b      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a11      	ldr	r2, [pc, #68]	; (8006650 <TIM_Base_SetConfig+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <TIM_Base_SetConfig+0x12c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0f      	ldr	r2, [pc, #60]	; (8006658 <TIM_Base_SetConfig+0x130>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d103      	bne.n	8006628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40013400 	.word	0x40013400
 8006650:	40014000 	.word	0x40014000
 8006654:	40014400 	.word	0x40014400
 8006658:	40014800 	.word	0x40014800

0800665c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f023 030a 	bic.w	r3, r3, #10
 8006698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	031b      	lsls	r3, r3, #12
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	f043 0307 	orr.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	021a      	lsls	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	431a      	orrs	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e068      	b.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2e      	ldr	r2, [pc, #184]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2d      	ldr	r2, [pc, #180]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01d      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d018      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a18      	ldr	r2, [pc, #96]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a13      	ldr	r2, [pc, #76]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a14      	ldr	r2, [pc, #80]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10c      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40014000 	.word	0x40014000

080068a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e040      	b.n	8006970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fb fc62 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f82c 	bl	8006978 <UART_SetConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e022      	b.n	8006970 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 faaa 	bl	8006e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fb31 	bl	8006fd0 <UART_CheckIdleState>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800697c:	b088      	sub	sp, #32
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	4313      	orrs	r3, r2
 800699c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4bac      	ldr	r3, [pc, #688]	; (8006c58 <UART_SetConfig+0x2e0>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	69f9      	ldr	r1, [r7, #28]
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4aa2      	ldr	r2, [pc, #648]	; (8006c5c <UART_SetConfig+0x2e4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a99      	ldr	r2, [pc, #612]	; (8006c60 <UART_SetConfig+0x2e8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d121      	bne.n	8006a44 <UART_SetConfig+0xcc>
 8006a00:	4b98      	ldr	r3, [pc, #608]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d816      	bhi.n	8006a3c <UART_SetConfig+0xc4>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x9c>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a31 	.word	0x08006a31
 8006a1c:	08006a2b 	.word	0x08006a2b
 8006a20:	08006a37 	.word	0x08006a37
 8006a24:	2301      	movs	r3, #1
 8006a26:	76fb      	strb	r3, [r7, #27]
 8006a28:	e0e8      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	76fb      	strb	r3, [r7, #27]
 8006a2e:	e0e5      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a30:	2304      	movs	r3, #4
 8006a32:	76fb      	strb	r3, [r7, #27]
 8006a34:	e0e2      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a36:	2308      	movs	r3, #8
 8006a38:	76fb      	strb	r3, [r7, #27]
 8006a3a:	e0df      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	76fb      	strb	r3, [r7, #27]
 8006a40:	bf00      	nop
 8006a42:	e0db      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a87      	ldr	r2, [pc, #540]	; (8006c68 <UART_SetConfig+0x2f0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d134      	bne.n	8006ab8 <UART_SetConfig+0x140>
 8006a4e:	4b85      	ldr	r3, [pc, #532]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d829      	bhi.n	8006ab0 <UART_SetConfig+0x138>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0xec>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a99 	.word	0x08006a99
 8006a68:	08006ab1 	.word	0x08006ab1
 8006a6c:	08006ab1 	.word	0x08006ab1
 8006a70:	08006ab1 	.word	0x08006ab1
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006ab1 	.word	0x08006ab1
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006ab1 	.word	0x08006ab1
 8006a84:	08006a9f 	.word	0x08006a9f
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006aab 	.word	0x08006aab
 8006a98:	2300      	movs	r3, #0
 8006a9a:	76fb      	strb	r3, [r7, #27]
 8006a9c:	e0ae      	b.n	8006bfc <UART_SetConfig+0x284>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	76fb      	strb	r3, [r7, #27]
 8006aa2:	e0ab      	b.n	8006bfc <UART_SetConfig+0x284>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	76fb      	strb	r3, [r7, #27]
 8006aa8:	e0a8      	b.n	8006bfc <UART_SetConfig+0x284>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	76fb      	strb	r3, [r7, #27]
 8006aae:	e0a5      	b.n	8006bfc <UART_SetConfig+0x284>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	76fb      	strb	r3, [r7, #27]
 8006ab4:	bf00      	nop
 8006ab6:	e0a1      	b.n	8006bfc <UART_SetConfig+0x284>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6b      	ldr	r2, [pc, #428]	; (8006c6c <UART_SetConfig+0x2f4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d120      	bne.n	8006b04 <UART_SetConfig+0x18c>
 8006ac2:	4b68      	ldr	r3, [pc, #416]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d00f      	beq.n	8006af0 <UART_SetConfig+0x178>
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d802      	bhi.n	8006ada <UART_SetConfig+0x162>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <UART_SetConfig+0x16c>
 8006ad8:	e010      	b.n	8006afc <UART_SetConfig+0x184>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d005      	beq.n	8006aea <UART_SetConfig+0x172>
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	d009      	beq.n	8006af6 <UART_SetConfig+0x17e>
 8006ae2:	e00b      	b.n	8006afc <UART_SetConfig+0x184>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	76fb      	strb	r3, [r7, #27]
 8006ae8:	e088      	b.n	8006bfc <UART_SetConfig+0x284>
 8006aea:	2302      	movs	r3, #2
 8006aec:	76fb      	strb	r3, [r7, #27]
 8006aee:	e085      	b.n	8006bfc <UART_SetConfig+0x284>
 8006af0:	2304      	movs	r3, #4
 8006af2:	76fb      	strb	r3, [r7, #27]
 8006af4:	e082      	b.n	8006bfc <UART_SetConfig+0x284>
 8006af6:	2308      	movs	r3, #8
 8006af8:	76fb      	strb	r3, [r7, #27]
 8006afa:	e07f      	b.n	8006bfc <UART_SetConfig+0x284>
 8006afc:	2310      	movs	r3, #16
 8006afe:	76fb      	strb	r3, [r7, #27]
 8006b00:	bf00      	nop
 8006b02:	e07b      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a59      	ldr	r2, [pc, #356]	; (8006c70 <UART_SetConfig+0x2f8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d120      	bne.n	8006b50 <UART_SetConfig+0x1d8>
 8006b0e:	4b55      	ldr	r3, [pc, #340]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d00f      	beq.n	8006b3c <UART_SetConfig+0x1c4>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d802      	bhi.n	8006b26 <UART_SetConfig+0x1ae>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <UART_SetConfig+0x1b8>
 8006b24:	e010      	b.n	8006b48 <UART_SetConfig+0x1d0>
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d005      	beq.n	8006b36 <UART_SetConfig+0x1be>
 8006b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b2c:	d009      	beq.n	8006b42 <UART_SetConfig+0x1ca>
 8006b2e:	e00b      	b.n	8006b48 <UART_SetConfig+0x1d0>
 8006b30:	2300      	movs	r3, #0
 8006b32:	76fb      	strb	r3, [r7, #27]
 8006b34:	e062      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b36:	2302      	movs	r3, #2
 8006b38:	76fb      	strb	r3, [r7, #27]
 8006b3a:	e05f      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	76fb      	strb	r3, [r7, #27]
 8006b40:	e05c      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b42:	2308      	movs	r3, #8
 8006b44:	76fb      	strb	r3, [r7, #27]
 8006b46:	e059      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	76fb      	strb	r3, [r7, #27]
 8006b4c:	bf00      	nop
 8006b4e:	e055      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a47      	ldr	r2, [pc, #284]	; (8006c74 <UART_SetConfig+0x2fc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d124      	bne.n	8006ba4 <UART_SetConfig+0x22c>
 8006b5a:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b68:	d012      	beq.n	8006b90 <UART_SetConfig+0x218>
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d802      	bhi.n	8006b76 <UART_SetConfig+0x1fe>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <UART_SetConfig+0x20c>
 8006b74:	e012      	b.n	8006b9c <UART_SetConfig+0x224>
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7a:	d006      	beq.n	8006b8a <UART_SetConfig+0x212>
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b80:	d009      	beq.n	8006b96 <UART_SetConfig+0x21e>
 8006b82:	e00b      	b.n	8006b9c <UART_SetConfig+0x224>
 8006b84:	2300      	movs	r3, #0
 8006b86:	76fb      	strb	r3, [r7, #27]
 8006b88:	e038      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	76fb      	strb	r3, [r7, #27]
 8006b8e:	e035      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b90:	2304      	movs	r3, #4
 8006b92:	76fb      	strb	r3, [r7, #27]
 8006b94:	e032      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b96:	2308      	movs	r3, #8
 8006b98:	76fb      	strb	r3, [r7, #27]
 8006b9a:	e02f      	b.n	8006bfc <UART_SetConfig+0x284>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	76fb      	strb	r3, [r7, #27]
 8006ba0:	bf00      	nop
 8006ba2:	e02b      	b.n	8006bfc <UART_SetConfig+0x284>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d124      	bne.n	8006bf8 <UART_SetConfig+0x280>
 8006bae:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d012      	beq.n	8006be4 <UART_SetConfig+0x26c>
 8006bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc2:	d802      	bhi.n	8006bca <UART_SetConfig+0x252>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <UART_SetConfig+0x260>
 8006bc8:	e012      	b.n	8006bf0 <UART_SetConfig+0x278>
 8006bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bce:	d006      	beq.n	8006bde <UART_SetConfig+0x266>
 8006bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd4:	d009      	beq.n	8006bea <UART_SetConfig+0x272>
 8006bd6:	e00b      	b.n	8006bf0 <UART_SetConfig+0x278>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	76fb      	strb	r3, [r7, #27]
 8006bdc:	e00e      	b.n	8006bfc <UART_SetConfig+0x284>
 8006bde:	2302      	movs	r3, #2
 8006be0:	76fb      	strb	r3, [r7, #27]
 8006be2:	e00b      	b.n	8006bfc <UART_SetConfig+0x284>
 8006be4:	2304      	movs	r3, #4
 8006be6:	76fb      	strb	r3, [r7, #27]
 8006be8:	e008      	b.n	8006bfc <UART_SetConfig+0x284>
 8006bea:	2308      	movs	r3, #8
 8006bec:	76fb      	strb	r3, [r7, #27]
 8006bee:	e005      	b.n	8006bfc <UART_SetConfig+0x284>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	76fb      	strb	r3, [r7, #27]
 8006bf4:	bf00      	nop
 8006bf6:	e001      	b.n	8006bfc <UART_SetConfig+0x284>
 8006bf8:	2310      	movs	r3, #16
 8006bfa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	f040 8087 	bne.w	8006d16 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c08:	7efb      	ldrb	r3, [r7, #27]
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d836      	bhi.n	8006c7c <UART_SetConfig+0x304>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x29c>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c7d 	.word	0x08006c7d
 8006c24:	08006c47 	.word	0x08006c47
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7fe fbd8 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8006c3c:	6178      	str	r0, [r7, #20]
        break;
 8006c3e:	e022      	b.n	8006c86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <UART_SetConfig+0x300>)
 8006c42:	617b      	str	r3, [r7, #20]
        break;
 8006c44:	e01f      	b.n	8006c86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fe fb3b 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8006c4a:	6178      	str	r0, [r7, #20]
        break;
 8006c4c:	e01b      	b.n	8006c86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	617b      	str	r3, [r7, #20]
        break;
 8006c54:	e017      	b.n	8006c86 <UART_SetConfig+0x30e>
 8006c56:	bf00      	nop
 8006c58:	efff69f3 	.word	0xefff69f3
 8006c5c:	40008000 	.word	0x40008000
 8006c60:	40013800 	.word	0x40013800
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40004400 	.word	0x40004400
 8006c6c:	40004800 	.word	0x40004800
 8006c70:	40004c00 	.word	0x40004c00
 8006c74:	40005000 	.word	0x40005000
 8006c78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	76bb      	strb	r3, [r7, #26]
        break;
 8006c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80f1 	beq.w	8006e70 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d305      	bcc.n	8006caa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d902      	bls.n	8006cb0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	76bb      	strb	r3, [r7, #26]
 8006cae:	e0df      	b.n	8006e70 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	f04f 0400 	mov.w	r4, #0
 8006cc0:	0214      	lsls	r4, r2, #8
 8006cc2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006cc6:	020b      	lsls	r3, r1, #8
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6852      	ldr	r2, [r2, #4]
 8006ccc:	0852      	lsrs	r2, r2, #1
 8006cce:	4611      	mov	r1, r2
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	eb13 0b01 	adds.w	fp, r3, r1
 8006cd8:	eb44 0c02 	adc.w	ip, r4, r2
 8006cdc:	4658      	mov	r0, fp
 8006cde:	4661      	mov	r1, ip
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f04f 0400 	mov.w	r4, #0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	f7f9 fe82 	bl	80009f4 <__aeabi_uldivmod>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfc:	d308      	bcc.n	8006d10 <UART_SetConfig+0x398>
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d04:	d204      	bcs.n	8006d10 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e0af      	b.n	8006e70 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	76bb      	strb	r3, [r7, #26]
 8006d14:	e0ac      	b.n	8006e70 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1e:	d15b      	bne.n	8006dd8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006d20:	7efb      	ldrb	r3, [r7, #27]
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d827      	bhi.n	8006d76 <UART_SetConfig+0x3fe>
 8006d26:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0x3b4>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	08006d77 	.word	0x08006d77
 8006d3c:	08006d67 	.word	0x08006d67
 8006d40:	08006d77 	.word	0x08006d77
 8006d44:	08006d77 	.word	0x08006d77
 8006d48:	08006d77 	.word	0x08006d77
 8006d4c:	08006d6f 	.word	0x08006d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d50:	f7fe fb4c 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8006d54:	6178      	str	r0, [r7, #20]
        break;
 8006d56:	e013      	b.n	8006d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d58:	f7fe fb5e 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8006d5c:	6178      	str	r0, [r7, #20]
        break;
 8006d5e:	e00f      	b.n	8006d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d60:	4b49      	ldr	r3, [pc, #292]	; (8006e88 <UART_SetConfig+0x510>)
 8006d62:	617b      	str	r3, [r7, #20]
        break;
 8006d64:	e00c      	b.n	8006d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d66:	f7fe faab 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8006d6a:	6178      	str	r0, [r7, #20]
        break;
 8006d6c:	e008      	b.n	8006d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d72:	617b      	str	r3, [r7, #20]
        break;
 8006d74:	e004      	b.n	8006d80 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	76bb      	strb	r3, [r7, #26]
        break;
 8006d7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d074      	beq.n	8006e70 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	005a      	lsls	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d916      	bls.n	8006dd2 <UART_SetConfig+0x45a>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d212      	bcs.n	8006dd2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f023 030f 	bic.w	r3, r3, #15
 8006db4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	89fb      	ldrh	r3, [r7, #14]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	89fa      	ldrh	r2, [r7, #14]
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	e04e      	b.n	8006e70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	76bb      	strb	r3, [r7, #26]
 8006dd6:	e04b      	b.n	8006e70 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dd8:	7efb      	ldrb	r3, [r7, #27]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d827      	bhi.n	8006e2e <UART_SetConfig+0x4b6>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x46c>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e2f 	.word	0x08006e2f
 8006df4:	08006e1f 	.word	0x08006e1f
 8006df8:	08006e2f 	.word	0x08006e2f
 8006dfc:	08006e2f 	.word	0x08006e2f
 8006e00:	08006e2f 	.word	0x08006e2f
 8006e04:	08006e27 	.word	0x08006e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fe faf0 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8006e0c:	6178      	str	r0, [r7, #20]
        break;
 8006e0e:	e013      	b.n	8006e38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e10:	f7fe fb02 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8006e14:	6178      	str	r0, [r7, #20]
        break;
 8006e16:	e00f      	b.n	8006e38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e18:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <UART_SetConfig+0x510>)
 8006e1a:	617b      	str	r3, [r7, #20]
        break;
 8006e1c:	e00c      	b.n	8006e38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e1e:	f7fe fa4f 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8006e22:	6178      	str	r0, [r7, #20]
        break;
 8006e24:	e008      	b.n	8006e38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	617b      	str	r3, [r7, #20]
        break;
 8006e2c:	e004      	b.n	8006e38 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	76bb      	strb	r3, [r7, #26]
        break;
 8006e36:	bf00      	nop
    }

    if (pclk != 0U)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d018      	beq.n	8006e70 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	085a      	lsrs	r2, r3, #1
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d908      	bls.n	8006e6c <UART_SetConfig+0x4f4>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e60:	d204      	bcs.n	8006e6c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	60da      	str	r2, [r3, #12]
 8006e6a:	e001      	b.n	8006e70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006e7c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006e88:	00f42400 	.word	0x00f42400

08006e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8a:	d10a      	bne.n	8006fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fde:	f7fb fab3 	bl	8002548 <HAL_GetTick>
 8006fe2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d10e      	bne.n	8007010 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f82a 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e020      	b.n	8007052 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b04      	cmp	r3, #4
 800701c:	d10e      	bne.n	800703c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f814 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e00a      	b.n	8007052 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706a:	e05d      	b.n	8007128 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007072:	d059      	beq.n	8007128 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007074:	f7fb fa68 	bl	8002548 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <UART_WaitOnFlagUntilTimeout+0x30>
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d11b      	bne.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007098:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0201 	bic.w	r2, r2, #1
 80070a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e042      	b.n	8007148 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02b      	beq.n	8007128 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070de:	d123      	bne.n	8007128 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e00f      	b.n	8007148 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4013      	ands	r3, r2
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	bf0c      	ite	eq
 8007138:	2301      	moveq	r3, #1
 800713a:	2300      	movne	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	429a      	cmp	r2, r3
 8007144:	d092      	beq.n	800706c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <arm_sin_f32>:
 8007150:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80071d0 <arm_sin_f32+0x80>
 8007154:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007158:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007160:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007164:	d504      	bpl.n	8007170 <arm_sin_f32+0x20>
 8007166:	ee17 3a90 	vmov	r3, s15
 800716a:	3b01      	subs	r3, #1
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007174:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80071d4 <arm_sin_f32+0x84>
 8007178:	ee30 0a67 	vsub.f32	s0, s0, s15
 800717c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007180:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007184:	ee17 3a90 	vmov	r3, s15
 8007188:	b29b      	uxth	r3, r3
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	d21a      	bcs.n	80071c6 <arm_sin_f32+0x76>
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800719e:	4a0e      	ldr	r2, [pc, #56]	; (80071d8 <arm_sin_f32+0x88>)
 80071a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80071a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80071ac:	ed93 7a00 	vldr	s14, [r3]
 80071b0:	edd2 6a00 	vldr	s13, [r2]
 80071b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071b8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80071bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80071c4:	4770      	bx	lr
 80071c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80071ca:	2101      	movs	r1, #1
 80071cc:	2300      	movs	r3, #0
 80071ce:	e7e6      	b.n	800719e <arm_sin_f32+0x4e>
 80071d0:	3e22f983 	.word	0x3e22f983
 80071d4:	44000000 	.word	0x44000000
 80071d8:	08007400 	.word	0x08007400

080071dc <__errno>:
 80071dc:	4b01      	ldr	r3, [pc, #4]	; (80071e4 <__errno+0x8>)
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	2000000c 	.word	0x2000000c

080071e8 <__libc_init_array>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4e0d      	ldr	r6, [pc, #52]	; (8007220 <__libc_init_array+0x38>)
 80071ec:	4c0d      	ldr	r4, [pc, #52]	; (8007224 <__libc_init_array+0x3c>)
 80071ee:	1ba4      	subs	r4, r4, r6
 80071f0:	10a4      	asrs	r4, r4, #2
 80071f2:	2500      	movs	r5, #0
 80071f4:	42a5      	cmp	r5, r4
 80071f6:	d109      	bne.n	800720c <__libc_init_array+0x24>
 80071f8:	4e0b      	ldr	r6, [pc, #44]	; (8007228 <__libc_init_array+0x40>)
 80071fa:	4c0c      	ldr	r4, [pc, #48]	; (800722c <__libc_init_array+0x44>)
 80071fc:	f000 f8c8 	bl	8007390 <_init>
 8007200:	1ba4      	subs	r4, r4, r6
 8007202:	10a4      	asrs	r4, r4, #2
 8007204:	2500      	movs	r5, #0
 8007206:	42a5      	cmp	r5, r4
 8007208:	d105      	bne.n	8007216 <__libc_init_array+0x2e>
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007210:	4798      	blx	r3
 8007212:	3501      	adds	r5, #1
 8007214:	e7ee      	b.n	80071f4 <__libc_init_array+0xc>
 8007216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800721a:	4798      	blx	r3
 800721c:	3501      	adds	r5, #1
 800721e:	e7f2      	b.n	8007206 <__libc_init_array+0x1e>
 8007220:	08007c0c 	.word	0x08007c0c
 8007224:	08007c0c 	.word	0x08007c0c
 8007228:	08007c0c 	.word	0x08007c0c
 800722c:	08007c10 	.word	0x08007c10

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <rand>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4b13      	ldr	r3, [pc, #76]	; (8007290 <rand+0x50>)
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007248:	b97b      	cbnz	r3, 800726a <rand+0x2a>
 800724a:	2018      	movs	r0, #24
 800724c:	f000 f82c 	bl	80072a8 <malloc>
 8007250:	4a10      	ldr	r2, [pc, #64]	; (8007294 <rand+0x54>)
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <rand+0x58>)
 8007254:	63a0      	str	r0, [r4, #56]	; 0x38
 8007256:	e9c0 2300 	strd	r2, r3, [r0]
 800725a:	4b10      	ldr	r3, [pc, #64]	; (800729c <rand+0x5c>)
 800725c:	6083      	str	r3, [r0, #8]
 800725e:	230b      	movs	r3, #11
 8007260:	8183      	strh	r3, [r0, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	2300      	movs	r3, #0
 8007266:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800726a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800726c:	480c      	ldr	r0, [pc, #48]	; (80072a0 <rand+0x60>)
 800726e:	690a      	ldr	r2, [r1, #16]
 8007270:	694b      	ldr	r3, [r1, #20]
 8007272:	4c0c      	ldr	r4, [pc, #48]	; (80072a4 <rand+0x64>)
 8007274:	4350      	muls	r0, r2
 8007276:	fb04 0003 	mla	r0, r4, r3, r0
 800727a:	fba2 2304 	umull	r2, r3, r2, r4
 800727e:	4403      	add	r3, r0
 8007280:	1c54      	adds	r4, r2, #1
 8007282:	f143 0500 	adc.w	r5, r3, #0
 8007286:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800728a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	2000000c 	.word	0x2000000c
 8007294:	abcd330e 	.word	0xabcd330e
 8007298:	e66d1234 	.word	0xe66d1234
 800729c:	0005deec 	.word	0x0005deec
 80072a0:	5851f42d 	.word	0x5851f42d
 80072a4:	4c957f2d 	.word	0x4c957f2d

080072a8 <malloc>:
 80072a8:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <malloc+0xc>)
 80072aa:	4601      	mov	r1, r0
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f000 b803 	b.w	80072b8 <_malloc_r>
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <_malloc_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	1ccd      	adds	r5, r1, #3
 80072bc:	f025 0503 	bic.w	r5, r5, #3
 80072c0:	3508      	adds	r5, #8
 80072c2:	2d0c      	cmp	r5, #12
 80072c4:	bf38      	it	cc
 80072c6:	250c      	movcc	r5, #12
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	4606      	mov	r6, r0
 80072cc:	db01      	blt.n	80072d2 <_malloc_r+0x1a>
 80072ce:	42a9      	cmp	r1, r5
 80072d0:	d903      	bls.n	80072da <_malloc_r+0x22>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	2000      	movs	r0, #0
 80072d8:	bd70      	pop	{r4, r5, r6, pc}
 80072da:	f000 f857 	bl	800738c <__malloc_lock>
 80072de:	4a21      	ldr	r2, [pc, #132]	; (8007364 <_malloc_r+0xac>)
 80072e0:	6814      	ldr	r4, [r2, #0]
 80072e2:	4621      	mov	r1, r4
 80072e4:	b991      	cbnz	r1, 800730c <_malloc_r+0x54>
 80072e6:	4c20      	ldr	r4, [pc, #128]	; (8007368 <_malloc_r+0xb0>)
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	b91b      	cbnz	r3, 80072f4 <_malloc_r+0x3c>
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f83d 	bl	800736c <_sbrk_r>
 80072f2:	6020      	str	r0, [r4, #0]
 80072f4:	4629      	mov	r1, r5
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 f838 	bl	800736c <_sbrk_r>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d124      	bne.n	800734a <_malloc_r+0x92>
 8007300:	230c      	movs	r3, #12
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	4630      	mov	r0, r6
 8007306:	f000 f842 	bl	800738e <__malloc_unlock>
 800730a:	e7e4      	b.n	80072d6 <_malloc_r+0x1e>
 800730c:	680b      	ldr	r3, [r1, #0]
 800730e:	1b5b      	subs	r3, r3, r5
 8007310:	d418      	bmi.n	8007344 <_malloc_r+0x8c>
 8007312:	2b0b      	cmp	r3, #11
 8007314:	d90f      	bls.n	8007336 <_malloc_r+0x7e>
 8007316:	600b      	str	r3, [r1, #0]
 8007318:	50cd      	str	r5, [r1, r3]
 800731a:	18cc      	adds	r4, r1, r3
 800731c:	4630      	mov	r0, r6
 800731e:	f000 f836 	bl	800738e <__malloc_unlock>
 8007322:	f104 000b 	add.w	r0, r4, #11
 8007326:	1d23      	adds	r3, r4, #4
 8007328:	f020 0007 	bic.w	r0, r0, #7
 800732c:	1ac3      	subs	r3, r0, r3
 800732e:	d0d3      	beq.n	80072d8 <_malloc_r+0x20>
 8007330:	425a      	negs	r2, r3
 8007332:	50e2      	str	r2, [r4, r3]
 8007334:	e7d0      	b.n	80072d8 <_malloc_r+0x20>
 8007336:	428c      	cmp	r4, r1
 8007338:	684b      	ldr	r3, [r1, #4]
 800733a:	bf16      	itet	ne
 800733c:	6063      	strne	r3, [r4, #4]
 800733e:	6013      	streq	r3, [r2, #0]
 8007340:	460c      	movne	r4, r1
 8007342:	e7eb      	b.n	800731c <_malloc_r+0x64>
 8007344:	460c      	mov	r4, r1
 8007346:	6849      	ldr	r1, [r1, #4]
 8007348:	e7cc      	b.n	80072e4 <_malloc_r+0x2c>
 800734a:	1cc4      	adds	r4, r0, #3
 800734c:	f024 0403 	bic.w	r4, r4, #3
 8007350:	42a0      	cmp	r0, r4
 8007352:	d005      	beq.n	8007360 <_malloc_r+0xa8>
 8007354:	1a21      	subs	r1, r4, r0
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f808 	bl	800736c <_sbrk_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d0cf      	beq.n	8007300 <_malloc_r+0x48>
 8007360:	6025      	str	r5, [r4, #0]
 8007362:	e7db      	b.n	800731c <_malloc_r+0x64>
 8007364:	200000c8 	.word	0x200000c8
 8007368:	200000cc 	.word	0x200000cc

0800736c <_sbrk_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4c06      	ldr	r4, [pc, #24]	; (8007388 <_sbrk_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4605      	mov	r5, r0
 8007374:	4608      	mov	r0, r1
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	f7fb f824 	bl	80023c4 <_sbrk>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_sbrk_r+0x1a>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	b103      	cbz	r3, 8007386 <_sbrk_r+0x1a>
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20016510 	.word	0x20016510

0800738c <__malloc_lock>:
 800738c:	4770      	bx	lr

0800738e <__malloc_unlock>:
 800738e:	4770      	bx	lr

08007390 <_init>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr

0800739c <_fini>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr
